!function(n){var t={};function e(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return n[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}e.m=n,e.c=t,e.d=function(n,t,r){e.o(n,t)||Object.defineProperty(n,t,{enumerable:!0,get:r})},e.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},e.t=function(n,t){if(1&t&&(n=e(n)),8&t)return n;if(4&t&&"object"==typeof n&&n&&n.__esModule)return n;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:n}),2&t&&"string"!=typeof n)for(var o in n)e.d(r,o,function(t){return n[t]}.bind(null,o));return r},e.n=function(n){var t=n&&n.__esModule?function(){return n.default}:function(){return n};return e.d(t,"a",t),t},e.o=function(n,t){return Object.prototype.hasOwnProperty.call(n,t)},e.p="",e(e.s=3)}([function(n,t,e){"use strict";var r,o=this&&this.__extends||(r=function(n,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,t){n.__proto__=t}||function(n,t){for(var e in t)t.hasOwnProperty(e)&&(n[e]=t[e])})(n,t)},function(n,t){function e(){this.constructor=n}r(n,t),n.prototype=null===t?Object.create(t):(e.prototype=t.prototype,new e)}),a=this&&this.__assign||function(){return(a=Object.assign||function(n){for(var t,e=1,r=arguments.length;e<r;e++)for(var o in t=arguments[e])Object.prototype.hasOwnProperty.call(t,o)&&(n[o]=t[o]);return n}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0});var i,u,c=e(1),l=function(){function n(){this.locations=[new f("Galway").byRoad("Dublin").bySea("Atlantic Ocean").done(),new f("Dublin").byRoad("Galway").bySea("Irish Sea").done(),new h("Liverpool").byRoad("Manchester").byRoad("Swansea").byTrain("Manchester").bySea("Irish Sea").done(),new h("Edinburgh").byRoad("Manchester").byTrain("Manchester").bySea("North Sea").done(),new h("Manchester").byRoad("Edinburgh").byRoad("Liverpool").byRoad("London").byTrain("Edinburgh").byTrain("Liverpool").byTrain("London").done(),new f("Swansea").byRoad("Liverpool").byRoad("London").byTrain("London").bySea("Irish Sea").done(),new f("Plymouth").byRoad("London").bySea("English Channel").done(),new h("Nantes").byRoad("Le Havre").byRoad("Paris").byRoad("Clermont Ferrand").byRoad("Bordeaux").bySea("Bay of Biscay").done(),new f("Le Havre").byRoad("Nantes").byRoad("Paris").byRoad("Brussels").byTrain("Paris").bySea("English Channel").done(),new h("London").byRoad("Manchester").byRoad("Swansea").byRoad("Plymouth").byTrain("Manchester").byTrain("Swansea").bySea("English Channel").done(),new h("Paris").byRoad("Nantes").byRoad("Le Havre").byRoad("Brussels").byRoad("Strasbourg").byRoad("Geneva").byRoad("Clermont Ferrand").byTrain("Le Havre").byTrain("Brussels").byTrain("Marseilles").byTrain("Bordeaux").done(),new h("Brussels").byRoad("Le Havre").byRoad("Amsterdam").byRoad("Cologne").byRoad("Strasbourg").byRoad("Paris").byTrain("Cologne").byTrain("Paris").done(),new h("Amsterdam").byRoad("Brussels").byRoad("Cologne").bySea("North Sea").done(),new f("Strasbourg").byRoad("Paris").byRoad("Brussels").byRoad("Cologne").byRoad("Frankfurt").byRoad("Nuremburg").byRoad("Munich").byRoad("Zurich").byRoad("Geneva").byTrain("Frankfurt").byTrain("Zurich").done(),new h("Cologne").byRoad("Brussels").byRoad("Amsterdam").byRoad("Hamburg").byRoad("Leipzig").byRoad("Frankfurt").byRoad("Strasbourg").byTrain("Brussels").byTrain("Frankfurt").done(),new h("Hamburg").byRoad("Cologne").byRoad("Berlin").byRoad("Leipzig").byTrain("Berlin").bySea("North Sea").done(),new f("Frankfurt").byRoad("Strasbourg").byRoad("Cologne").byRoad("Leipzig").byRoad("Nuremburg").byTrain("Strasbourg").byTrain("Cologne").byTrain("Leipzig").done(),new f("Nuremburg").byRoad("Strasbourg").byRoad("Frankfurt").byRoad("Leipzig").byRoad("Prague").byRoad("Munich").byTrain("Leipzig").byTrain("Munich").done(),new h("Leipzig").byRoad("Cologne").byRoad("Hamburg").byRoad("Berlin").byRoad("Nuremburg").byRoad("Frankfurt").byTrain("Frankfurt").byTrain("Berlin").byTrain("Nuremburg").done(),new h("Berlin").byRoad("Hamburg").byRoad("Prague").byRoad("Leipzig").byTrain("Hamburg").byTrain("Prague").byTrain("Leipzig").done(),new p("Prague").byRoad("Berlin").byRoad("Vienna").byRoad("Nuremburg").byTrain("Berlin").byTrain("Vienna").done(),{name:"Castle Dracula",domain:u.east,roadConnections:["Klausenburg","Galatz"],seaConnections:[],trainConnections:[],type:i.castle},new f("Santander").byRoad("Lisbon").byRoad("Madrid").byRoad("Saragossa").byTrain("Madrid").bySea("Bay of Biscay").done(),new f("Saragossa").byRoad("Madrid").byRoad("Santander").byRoad("Bordeaux").byRoad("Toulouse").byRoad("Barcelona").byRoad("Alicante").byTrain("Madrid").byTrain("Bordeaux").byTrain("Barcelona").done(),new h("Bordeaux").byRoad("Saragossa").byRoad("Nantes").byRoad("Clermont Ferrand").byRoad("Toulouse").byTrain("Paris").byTrain("Saragossa").bySea("Bay of Biscay").done(),new f("Toulouse").byRoad("Saragossa").byRoad("Bordeaux").byRoad("Clermont Ferrand").byRoad("Marseilles").byRoad("Barcelona").done(),new h("Barcelona").byRoad("Saragossa").byRoad("Toulouse").byTrain("Saragossa").byTrain("Alicante").bySea("Mediterranean Sea").done(),new f("Clermont Ferrand").byRoad("Bordeaux").byRoad("Nantes").byRoad("Paris").byRoad("Geneva").byRoad("Marseilles").byRoad("Toulouse").done(),new h("Marseilles").byRoad("Toulouse").byRoad("Clermont Ferrand").byRoad("Geneva").byRoad("Zurich").byRoad("Milan").byRoad("Genoa").byTrain("Paris").bySea("Mediterranean Sea").done(),new f("Geneva").byRoad("Marseilles").byRoad("Clermont Ferrand").byRoad("Paris").byRoad("Strasbourg").byRoad("Zurich").byTrain("Milan").done(),new p("Genoa").byRoad("Marseilles").byRoad("Milan").byRoad("Venice").byRoad("Florence").byTrain("Milan").bySea("Tyrrhenian Sea").done(),new p("Milan").byRoad("Marseilles").byRoad("Zurich").byRoad("Munich").byRoad("Venice").byRoad("Genoa").byTrain("Geneva").byTrain("Zurich").byTrain("Florence").byTrain("Genoa").done(),new f("Zurich").byRoad("Marseilles").byRoad("Geneva").byRoad("Strasbourg").byRoad("Munich").byRoad("Milan").byTrain("Strasbourg").byTrain("Milan").done(),new d("Florence").byRoad("Genoa").byRoad("Venice").byRoad("Rome").byTrain("Milan").byTrain("Rome").done(),new d("Venice").byRoad("Florence").byRoad("Genoa").byRoad("Milan").byRoad("Munich").byTrain("Vienna").bySea("Adriatic Sea").done(),new h("Munich").byRoad("Milan").byRoad("Zurich").byRoad("Strasbourg").byRoad("Nuremburg").byRoad("Vienna").byRoad("Zagreb").byRoad("Venice").byTrain("Nuremburg").done(),new d("Zagreb").byRoad("Munich").byRoad("Vienna").byRoad("Budapest").byRoad("Szeged").byRoad("St. Joseph and St. Mary").byRoad("Sarajevo").done(),new p("Vienna").byRoad("Munich").byRoad("Prague").byRoad("Budapest").byRoad("Zagreb").byTrain("Venice").byTrain("Prague").byTrain("Budapest").done(),{name:"St. Joseph and St. Mary",domain:u.east,roadConnections:["Zagreb","Szeged","Belgrade","Sarajevo"],seaConnections:[],trainConnections:[],type:i.hospital},new d("Sarajevo").byRoad("Zagreb").byRoad("St. Joseph and St. Mary").byRoad("Belgrade").byRoad("Sofia").byRoad("Valona").done(),new d("Szeged").byRoad("Zagreb").byRoad("Budapest").byRoad("Klausenburg").byRoad("Belgrade").byRoad("St. Joseph and St. Mary").byTrain("Budapest").byTrain("Bucharest").byTrain("Belgrade").done(),new d("Budapest").byRoad("Vienna").byRoad("Klausenburg").byRoad("Szeged").byRoad("Zagreb").byTrain("Vienna").byTrain("Szeged").done(),new d("Belgrade").byRoad("St. Joseph and St. Mary").byRoad("Szeged").byRoad("Klausenburg").byRoad("Bucharest").byRoad("Sofia").byRoad("Sarajevo").byTrain("Szeged").byTrain("Sofia").done(),new d("Klausenburg").byRoad("Budapest").byRoad("Castle Dracula").byRoad("Galatz").byRoad("Bucharest").byRoad("Belgrade").byRoad("Szeged").done(),new d("Sofia").byRoad("Sarajevo").byRoad("Belgrade").byRoad("Bucharest").byRoad("Varna").byRoad("Salonica").byRoad("Valona").byTrain("Belgrade").byTrain("Salonica").byTrain("Varna").done(),new p("Bucharest").byRoad("Belgrade").byRoad("Klausenburg").byRoad("Galatz").byRoad("Constanta").byRoad("Sofia").byTrain("Szeged").byTrain("Galatz").byTrain("Constanta").done(),new d("Galatz").byRoad("Klausenburg").byRoad("Castle Dracula").byRoad("Constanta").byRoad("Bucharest").byTrain("Bucharest").done(),new p("Varna").byRoad("Sofia").byRoad("Constanta").byTrain("Sofia").bySea("Black Sea").done(),new p("Constanta").byRoad("Galatz").byRoad("Varna").byRoad("Bucharest").byTrain("Bucharest").bySea("Black Sea").done(),new h("Lisbon").byRoad("Santander").byRoad("Madrid").byRoad("Cadiz").byTrain("Madrid").bySea("Atlantic Ocean").done(),new h("Cadiz").byRoad("Lisbon").byRoad("Madrid").byRoad("Granada").bySea("Atlantic Ocean").done(),new h("Madrid").byRoad("Lisbon").byRoad("Santander").byRoad("Saragossa").byRoad("Alicante").byRoad("Granada").byRoad("Cadiz").byTrain("Lisbon").byTrain("Santander").byTrain("Saragossa").byTrain("Alicante").done(),new f("Granada").byRoad("Cadiz").byRoad("Madrid").byRoad("Alicante").done(),new f("Alicante").byRoad("Granada").byRoad("Madrid").byRoad("Saragossa").byTrain("Madrid").byTrain("Barcelona").bySea("Mediterranean Sea").done(),new d("Cagliari").bySea("Mediterranean Sea").bySea("Tyrrhenian Sea").done(),new p("Rome").byRoad("Florence").byRoad("Bari").byRoad("Naples").byTrain("Florence").byTrain("Naples").bySea("Tyrrhenian Sea").done(),new p("Naples").byRoad("Rome").byRoad("Bari").byTrain("Rome").byTrain("Bari").bySea("Tyrrhenian Sea").done(),new d("Bari").byRoad("Naples").byRoad("Rome").byTrain("Naples").bySea("Adriatic Sea").done(),new d("Valona").byRoad("Sarajevo").byRoad("Sofia").byRoad("Salonica").byRoad("Athens").bySea("Ionian Sea").done(),new d("Salonica").byRoad("Valona").byRoad("Sofia").byTrain("Sofia").bySea("Ionian Sea").done(),new p("Athens").byRoad("Valona").bySea("Ionian Sea").done(),a({},y,{name:"Atlantic Ocean",seaConnections:["North Sea","Irish Sea","English Channel","Bay of Biscay","Mediterranean Sea","Galway","Lisbon","Cadiz"]}),a({},y,{name:"Irish Sea",seaConnections:["Atlantic Ocean","Dublin","Liverpool","Swansea"]}),a({},y,{name:"English Channel",seaConnections:["Atlantic Ocean","North Sea","Plymouth","London","Le Havre"]}),a({},y,{name:"North Sea",seaConnections:["Atlantic Ocean","English Channel","Edinburgh","Amsterdam","Hamburg"]}),a({},y,{name:"Bay of Biscay",seaConnections:["Atlantic Ocean","Nantes","Bordeaux","Santander"]}),a({},y,{name:"Mediterranean Sea",seaConnections:["Atlantic Ocean","Tyrrhenian Sea","Alicante","Barcelona","Marseilles","Cagliari"]}),a({},y,{name:"Tyrrhenian Sea",seaConnections:["Mediterranean Sea","Ionian Sea","Cagliari","Genoa","Rome","Naples"]}),a({},y,{name:"Adriatic Sea",seaConnections:["Ionian Sea","Bari","Venice"]}),a({},y,{name:"Ionian Sea",seaConnections:["Adriatic Sea","Black Sea","Valona","Athens","Salonica","Tyrrhenian Sea"]}),a({},y,{name:"Black Sea",seaConnections:["Ionian Sea","Varna","Constanta"]})],this.locations.sort(function(n,t){return n.name.toLowerCase()<t.name.toLowerCase()?-1:n.name.toLowerCase()>t.name.toLowerCase()?1:0})}return n.prototype.verifyMapData=function(){var n=this;console.log("Verifying map data");var t=0,e=0,r=[];this.locations.forEach(function(o){o.type===i.hospital&&(t+=1),o.type===i.castle&&(e+=1),o.name?o.type?o.domain?o.domain===u.sea&&o.type!==i.sea||o.domain!==u.sea&&o.type===i.sea?r.push(o.name+" has type "+o.type+" and domain "+o.domain):o.roadConnections?o.trainConnections?o.seaConnections?o.roadConnections.length+o.trainConnections.length+o.seaConnections.length!==0?(o.roadConnections.forEach(function(t){var e=n.getLocationByName(t);e?(e.type===i.sea&&r.push(o.name+" has a road going to sea location "+t),e.roadConnections.find(function(n){return n===o.name})||r.push(o.name+" has a road to "+t+" with no road back"),o.type===i.sea&&r.push("Sea location "+o.name+" has a road to "+e.name)):r.push(o.name+" has a road going to missing location "+t)}),o.trainConnections.forEach(function(t){var e=n.getLocationByName(t);e?(e.type===i.sea&&r.push(o.name+" has a train going to sea location "+t),e.trainConnections.find(function(n){return n===o.name})||r.push(o.name+" has a train to "+t+" with no train back"),o.type===i.sea&&r.push("Sea location "+o.name+" has a train to location "+e.name)):r.push(o.name+" has a train going to missing location "+t)}),o.seaConnections.forEach(function(t){var e=n.getLocationByName(t);e?(e.seaConnections.find(function(n){return n===o.name})||r.push(o.name+" has a sea connection to "+t+" with no sea connection back"),o.type!==i.sea&&e.type!==i.sea&&r.push("Land location "+o.name+" has a sea connection to land location "+e.name)):r.push(o.name+" has a sea connection going to missing location "+t)})):r.push(o.name+" has no connections"):r.push(o.name+" is missing sea connection definition"):r.push(o.name+" is missing train connection definition"):r.push(o.name+" is missing road connection definition"):r.push(o.name+" has no domain"):r.push(o.name+" has no type"):r.push("Location exists with no name")});for(var o=!0,a=0;a<this.locations.length-1&&o;a++)for(var c=a+1;c<this.locations.length&&o;c++)if(-1==this.distanceBetweenLocations(this.locations[a],this.locations[c])){r.push("Disconnected locations. No way to get from "+this.locations[a].name+" to "+this.locations[c].name),o=!1;break}return 1!==t&&r.push("Expected exactly 1 hospital location, found "+t+"."),1!==e&&r.push("Expected exactly 1 castle location, found "+e+"."),r.forEach(function(n){return console.log(n)}),r.length>0?"Map data invalid. "+r.length+" problems:\n"+r.join("\n"):"All map data valid"},n.prototype.getLocationByName=function(n){return this.locations.find(function(t){return t.name===n})},n.prototype.distanceBetweenLocations=function(n,t,e,r,o,a){var i=this;if(void 0===e&&(e=["road","train","sea"]),void 0===r&&(r=[]),void 0===o&&(o=[]),void 0===a&&(a=0),n)return this.distanceBetweenLocations(null,t,e,[],[n],0);if(o.find(function(n){return n==t}))return a;r=c.union(r,o);var u=[];o.forEach(function(n){if(e.find(function(n){return"road"==n})){var t=n.roadConnections.map(function(n){return i.getLocationByName(n)});u=c.union(u,t)}if(e.find(function(n){return"train"==n})){var r=n.trainConnections.map(function(n){return i.getLocationByName(n)});u=c.union(u,r)}if(e.find(function(n){return"sea"==n})){var o=n.seaConnections.map(function(n){return i.getLocationByName(n)});u=c.union(u,o)}});var l=c.difference(u,r);return 0==l.length?-1:this.distanceBetweenLocations(null,t,e,r,l,a+1)},n}();t.GameMap=l,function(n){n.largeCity="Large City",n.smallCity="Small City",n.hospital="Hospital",n.castle="Castle",n.sea="Sea"}(i=t.LocationType||(t.LocationType={})),function(n){n.west="West",n.east="East",n.sea="Sea"}(u=t.LocationDomain||(t.LocationDomain={}));var s=function(){function n(n){this.location={name:n,type:null,domain:null,roadConnections:[],trainConnections:[],seaConnections:[]}}return n.prototype.byRoad=function(n){return this.location.roadConnections.push(n),this},n.prototype.bySea=function(n){return this.location.seaConnections.push(n),this},n.prototype.byTrain=function(n){return this.location.trainConnections.push(n),this},n.prototype.done=function(){return this.location},n}(),f=function(n){function t(t){var e=n.call(this,t)||this;return e.location.type=i.smallCity,e.location.domain=u.west,e}return o(t,n),t}(s),h=function(n){function t(t){var e=n.call(this,t)||this;return e.location.type=i.largeCity,e.location.domain=u.west,e}return o(t,n),t}(s),d=function(n){function t(t){var e=n.call(this,t)||this;return e.location.type=i.smallCity,e.location.domain=u.east,e}return o(t,n),t}(s),p=function(n){function t(t){var e=n.call(this,t)||this;return e.location.type=i.largeCity,e.location.domain=u.east,e}return o(t,n),t}(s),y={name:null,domain:u.sea,roadConnections:[],trainConnections:[],seaConnections:[],type:i.sea}},function(n,t,e){(function(n,r){var o;
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */(function(){var a,i=200,u="Unsupported core-js use. Try https://npms.io/search?q=ponyfill.",c="Expected a function",l="__lodash_hash_undefined__",s=500,f="__lodash_placeholder__",h=1,d=2,p=4,y=1,v=2,g=1,b=2,m=4,_=8,w=16,R=32,S=64,L=128,B=256,T=512,E=30,x="...",M=800,C=16,A=1,k=2,I=1/0,P=9007199254740991,j=1.7976931348623157e308,O=NaN,D=4294967295,H=D-1,N=D>>>1,z=[["ary",L],["bind",g],["bindKey",b],["curry",_],["curryRight",w],["flip",T],["partial",R],["partialRight",S],["rearg",B]],F="[object Arguments]",W="[object Array]",G="[object AsyncFunction]",V="[object Boolean]",U="[object Date]",$="[object DOMException]",K="[object Error]",Z="[object Function]",q="[object GeneratorFunction]",J="[object Map]",Y="[object Number]",Q="[object Null]",X="[object Object]",nn="[object Proxy]",tn="[object RegExp]",en="[object Set]",rn="[object String]",on="[object Symbol]",an="[object Undefined]",un="[object WeakMap]",cn="[object WeakSet]",ln="[object ArrayBuffer]",sn="[object DataView]",fn="[object Float32Array]",hn="[object Float64Array]",dn="[object Int8Array]",pn="[object Int16Array]",yn="[object Int32Array]",vn="[object Uint8Array]",gn="[object Uint8ClampedArray]",bn="[object Uint16Array]",mn="[object Uint32Array]",_n=/\b__p \+= '';/g,wn=/\b(__p \+=) '' \+/g,Rn=/(__e\(.*?\)|\b__t\)) \+\n'';/g,Sn=/&(?:amp|lt|gt|quot|#39);/g,Ln=/[&<>"']/g,Bn=RegExp(Sn.source),Tn=RegExp(Ln.source),En=/<%-([\s\S]+?)%>/g,xn=/<%([\s\S]+?)%>/g,Mn=/<%=([\s\S]+?)%>/g,Cn=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,An=/^\w*$/,kn=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,In=/[\\^$.*+?()[\]{}|]/g,Pn=RegExp(In.source),jn=/^\s+|\s+$/g,On=/^\s+/,Dn=/\s+$/,Hn=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,Nn=/\{\n\/\* \[wrapped with (.+)\] \*/,zn=/,? & /,Fn=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,Wn=/\\(\\)?/g,Gn=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,Vn=/\w*$/,Un=/^[-+]0x[0-9a-f]+$/i,$n=/^0b[01]+$/i,Kn=/^\[object .+?Constructor\]$/,Zn=/^0o[0-7]+$/i,qn=/^(?:0|[1-9]\d*)$/,Jn=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,Yn=/($^)/,Qn=/['\n\r\u2028\u2029\\]/g,Xn="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",nt="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",tt="[\\ud800-\\udfff]",et="["+nt+"]",rt="["+Xn+"]",ot="\\d+",at="[\\u2700-\\u27bf]",it="[a-z\\xdf-\\xf6\\xf8-\\xff]",ut="[^\\ud800-\\udfff"+nt+ot+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",ct="\\ud83c[\\udffb-\\udfff]",lt="[^\\ud800-\\udfff]",st="(?:\\ud83c[\\udde6-\\uddff]){2}",ft="[\\ud800-\\udbff][\\udc00-\\udfff]",ht="[A-Z\\xc0-\\xd6\\xd8-\\xde]",dt="(?:"+it+"|"+ut+")",pt="(?:"+ht+"|"+ut+")",yt="(?:"+rt+"|"+ct+")"+"?",vt="[\\ufe0e\\ufe0f]?"+yt+("(?:\\u200d(?:"+[lt,st,ft].join("|")+")[\\ufe0e\\ufe0f]?"+yt+")*"),gt="(?:"+[at,st,ft].join("|")+")"+vt,bt="(?:"+[lt+rt+"?",rt,st,ft,tt].join("|")+")",mt=RegExp("['’]","g"),_t=RegExp(rt,"g"),wt=RegExp(ct+"(?="+ct+")|"+bt+vt,"g"),Rt=RegExp([ht+"?"+it+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[et,ht,"$"].join("|")+")",pt+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[et,ht+dt,"$"].join("|")+")",ht+"?"+dt+"+(?:['’](?:d|ll|m|re|s|t|ve))?",ht+"+(?:['’](?:D|LL|M|RE|S|T|VE))?","\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",ot,gt].join("|"),"g"),St=RegExp("[\\u200d\\ud800-\\udfff"+Xn+"\\ufe0e\\ufe0f]"),Lt=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,Bt=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],Tt=-1,Et={};Et[fn]=Et[hn]=Et[dn]=Et[pn]=Et[yn]=Et[vn]=Et[gn]=Et[bn]=Et[mn]=!0,Et[F]=Et[W]=Et[ln]=Et[V]=Et[sn]=Et[U]=Et[K]=Et[Z]=Et[J]=Et[Y]=Et[X]=Et[tn]=Et[en]=Et[rn]=Et[un]=!1;var xt={};xt[F]=xt[W]=xt[ln]=xt[sn]=xt[V]=xt[U]=xt[fn]=xt[hn]=xt[dn]=xt[pn]=xt[yn]=xt[J]=xt[Y]=xt[X]=xt[tn]=xt[en]=xt[rn]=xt[on]=xt[vn]=xt[gn]=xt[bn]=xt[mn]=!0,xt[K]=xt[Z]=xt[un]=!1;var Mt={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},Ct=parseFloat,At=parseInt,kt="object"==typeof n&&n&&n.Object===Object&&n,It="object"==typeof self&&self&&self.Object===Object&&self,Pt=kt||It||Function("return this")(),jt=t&&!t.nodeType&&t,Ot=jt&&"object"==typeof r&&r&&!r.nodeType&&r,Dt=Ot&&Ot.exports===jt,Ht=Dt&&kt.process,Nt=function(){try{var n=Ot&&Ot.require&&Ot.require("util").types;return n||Ht&&Ht.binding&&Ht.binding("util")}catch(n){}}(),zt=Nt&&Nt.isArrayBuffer,Ft=Nt&&Nt.isDate,Wt=Nt&&Nt.isMap,Gt=Nt&&Nt.isRegExp,Vt=Nt&&Nt.isSet,Ut=Nt&&Nt.isTypedArray;function $t(n,t,e){switch(e.length){case 0:return n.call(t);case 1:return n.call(t,e[0]);case 2:return n.call(t,e[0],e[1]);case 3:return n.call(t,e[0],e[1],e[2])}return n.apply(t,e)}function Kt(n,t,e,r){for(var o=-1,a=null==n?0:n.length;++o<a;){var i=n[o];t(r,i,e(i),n)}return r}function Zt(n,t){for(var e=-1,r=null==n?0:n.length;++e<r&&!1!==t(n[e],e,n););return n}function qt(n,t){for(var e=null==n?0:n.length;e--&&!1!==t(n[e],e,n););return n}function Jt(n,t){for(var e=-1,r=null==n?0:n.length;++e<r;)if(!t(n[e],e,n))return!1;return!0}function Yt(n,t){for(var e=-1,r=null==n?0:n.length,o=0,a=[];++e<r;){var i=n[e];t(i,e,n)&&(a[o++]=i)}return a}function Qt(n,t){return!!(null==n?0:n.length)&&ce(n,t,0)>-1}function Xt(n,t,e){for(var r=-1,o=null==n?0:n.length;++r<o;)if(e(t,n[r]))return!0;return!1}function ne(n,t){for(var e=-1,r=null==n?0:n.length,o=Array(r);++e<r;)o[e]=t(n[e],e,n);return o}function te(n,t){for(var e=-1,r=t.length,o=n.length;++e<r;)n[o+e]=t[e];return n}function ee(n,t,e,r){var o=-1,a=null==n?0:n.length;for(r&&a&&(e=n[++o]);++o<a;)e=t(e,n[o],o,n);return e}function re(n,t,e,r){var o=null==n?0:n.length;for(r&&o&&(e=n[--o]);o--;)e=t(e,n[o],o,n);return e}function oe(n,t){for(var e=-1,r=null==n?0:n.length;++e<r;)if(t(n[e],e,n))return!0;return!1}var ae=he("length");function ie(n,t,e){var r;return e(n,function(n,e,o){if(t(n,e,o))return r=e,!1}),r}function ue(n,t,e,r){for(var o=n.length,a=e+(r?1:-1);r?a--:++a<o;)if(t(n[a],a,n))return a;return-1}function ce(n,t,e){return t==t?function(n,t,e){var r=e-1,o=n.length;for(;++r<o;)if(n[r]===t)return r;return-1}(n,t,e):ue(n,se,e)}function le(n,t,e,r){for(var o=e-1,a=n.length;++o<a;)if(r(n[o],t))return o;return-1}function se(n){return n!=n}function fe(n,t){var e=null==n?0:n.length;return e?ye(n,t)/e:O}function he(n){return function(t){return null==t?a:t[n]}}function de(n){return function(t){return null==n?a:n[t]}}function pe(n,t,e,r,o){return o(n,function(n,o,a){e=r?(r=!1,n):t(e,n,o,a)}),e}function ye(n,t){for(var e,r=-1,o=n.length;++r<o;){var i=t(n[r]);i!==a&&(e=e===a?i:e+i)}return e}function ve(n,t){for(var e=-1,r=Array(n);++e<n;)r[e]=t(e);return r}function ge(n){return function(t){return n(t)}}function be(n,t){return ne(t,function(t){return n[t]})}function me(n,t){return n.has(t)}function _e(n,t){for(var e=-1,r=n.length;++e<r&&ce(t,n[e],0)>-1;);return e}function we(n,t){for(var e=n.length;e--&&ce(t,n[e],0)>-1;);return e}var Re=de({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"}),Se=de({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function Le(n){return"\\"+Mt[n]}function Be(n){return St.test(n)}function Te(n){var t=-1,e=Array(n.size);return n.forEach(function(n,r){e[++t]=[r,n]}),e}function Ee(n,t){return function(e){return n(t(e))}}function xe(n,t){for(var e=-1,r=n.length,o=0,a=[];++e<r;){var i=n[e];i!==t&&i!==f||(n[e]=f,a[o++]=e)}return a}function Me(n){var t=-1,e=Array(n.size);return n.forEach(function(n){e[++t]=n}),e}function Ce(n){var t=-1,e=Array(n.size);return n.forEach(function(n){e[++t]=[n,n]}),e}function Ae(n){return Be(n)?function(n){var t=wt.lastIndex=0;for(;wt.test(n);)++t;return t}(n):ae(n)}function ke(n){return Be(n)?function(n){return n.match(wt)||[]}(n):function(n){return n.split("")}(n)}var Ie=de({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var Pe=function n(t){var e,r=(t=null==t?Pt:Pe.defaults(Pt.Object(),t,Pe.pick(Pt,Bt))).Array,o=t.Date,Xn=t.Error,nt=t.Function,tt=t.Math,et=t.Object,rt=t.RegExp,ot=t.String,at=t.TypeError,it=r.prototype,ut=nt.prototype,ct=et.prototype,lt=t["__core-js_shared__"],st=ut.toString,ft=ct.hasOwnProperty,ht=0,dt=(e=/[^.]+$/.exec(lt&&lt.keys&&lt.keys.IE_PROTO||""))?"Symbol(src)_1."+e:"",pt=ct.toString,yt=st.call(et),vt=Pt._,gt=rt("^"+st.call(ft).replace(In,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),bt=Dt?t.Buffer:a,wt=t.Symbol,St=t.Uint8Array,Mt=bt?bt.allocUnsafe:a,kt=Ee(et.getPrototypeOf,et),It=et.create,jt=ct.propertyIsEnumerable,Ot=it.splice,Ht=wt?wt.isConcatSpreadable:a,Nt=wt?wt.iterator:a,ae=wt?wt.toStringTag:a,de=function(){try{var n=Na(et,"defineProperty");return n({},"",{}),n}catch(n){}}(),je=t.clearTimeout!==Pt.clearTimeout&&t.clearTimeout,Oe=o&&o.now!==Pt.Date.now&&o.now,De=t.setTimeout!==Pt.setTimeout&&t.setTimeout,He=tt.ceil,Ne=tt.floor,ze=et.getOwnPropertySymbols,Fe=bt?bt.isBuffer:a,We=t.isFinite,Ge=it.join,Ve=Ee(et.keys,et),Ue=tt.max,$e=tt.min,Ke=o.now,Ze=t.parseInt,qe=tt.random,Je=it.reverse,Ye=Na(t,"DataView"),Qe=Na(t,"Map"),Xe=Na(t,"Promise"),nr=Na(t,"Set"),tr=Na(t,"WeakMap"),er=Na(et,"create"),rr=tr&&new tr,or={},ar=fi(Ye),ir=fi(Qe),ur=fi(Xe),cr=fi(nr),lr=fi(tr),sr=wt?wt.prototype:a,fr=sr?sr.valueOf:a,hr=sr?sr.toString:a;function dr(n){if(xu(n)&&!gu(n)&&!(n instanceof gr)){if(n instanceof vr)return n;if(ft.call(n,"__wrapped__"))return hi(n)}return new vr(n)}var pr=function(){function n(){}return function(t){if(!Eu(t))return{};if(It)return It(t);n.prototype=t;var e=new n;return n.prototype=a,e}}();function yr(){}function vr(n,t){this.__wrapped__=n,this.__actions__=[],this.__chain__=!!t,this.__index__=0,this.__values__=a}function gr(n){this.__wrapped__=n,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=D,this.__views__=[]}function br(n){var t=-1,e=null==n?0:n.length;for(this.clear();++t<e;){var r=n[t];this.set(r[0],r[1])}}function mr(n){var t=-1,e=null==n?0:n.length;for(this.clear();++t<e;){var r=n[t];this.set(r[0],r[1])}}function _r(n){var t=-1,e=null==n?0:n.length;for(this.clear();++t<e;){var r=n[t];this.set(r[0],r[1])}}function wr(n){var t=-1,e=null==n?0:n.length;for(this.__data__=new _r;++t<e;)this.add(n[t])}function Rr(n){var t=this.__data__=new mr(n);this.size=t.size}function Sr(n,t){var e=gu(n),r=!e&&vu(n),o=!e&&!r&&wu(n),a=!e&&!r&&!o&&Ou(n),i=e||r||o||a,u=i?ve(n.length,ot):[],c=u.length;for(var l in n)!t&&!ft.call(n,l)||i&&("length"==l||o&&("offset"==l||"parent"==l)||a&&("buffer"==l||"byteLength"==l||"byteOffset"==l)||$a(l,c))||u.push(l);return u}function Lr(n){var t=n.length;return t?n[Ro(0,t-1)]:a}function Br(n,t){return ci(ra(n),Pr(t,0,n.length))}function Tr(n){return ci(ra(n))}function Er(n,t,e){(e===a||du(n[t],e))&&(e!==a||t in n)||kr(n,t,e)}function xr(n,t,e){var r=n[t];ft.call(n,t)&&du(r,e)&&(e!==a||t in n)||kr(n,t,e)}function Mr(n,t){for(var e=n.length;e--;)if(du(n[e][0],t))return e;return-1}function Cr(n,t,e,r){return Nr(n,function(n,o,a){t(r,n,e(n),a)}),r}function Ar(n,t){return n&&oa(t,oc(t),n)}function kr(n,t,e){"__proto__"==t&&de?de(n,t,{configurable:!0,enumerable:!0,value:e,writable:!0}):n[t]=e}function Ir(n,t){for(var e=-1,o=t.length,i=r(o),u=null==n;++e<o;)i[e]=u?a:Xu(n,t[e]);return i}function Pr(n,t,e){return n==n&&(e!==a&&(n=n<=e?n:e),t!==a&&(n=n>=t?n:t)),n}function jr(n,t,e,r,o,i){var u,c=t&h,l=t&d,s=t&p;if(e&&(u=o?e(n,r,o,i):e(n)),u!==a)return u;if(!Eu(n))return n;var f=gu(n);if(f){if(u=function(n){var t=n.length,e=new n.constructor(t);return t&&"string"==typeof n[0]&&ft.call(n,"index")&&(e.index=n.index,e.input=n.input),e}(n),!c)return ra(n,u)}else{var y=Wa(n),v=y==Z||y==q;if(wu(n))return Yo(n,c);if(y==X||y==F||v&&!o){if(u=l||v?{}:Va(n),!c)return l?function(n,t){return oa(n,Fa(n),t)}(n,function(n,t){return n&&oa(t,ac(t),n)}(u,n)):function(n,t){return oa(n,za(n),t)}(n,Ar(u,n))}else{if(!xt[y])return o?n:{};u=function(n,t,e){var r,o,a,i=n.constructor;switch(t){case ln:return Qo(n);case V:case U:return new i(+n);case sn:return function(n,t){var e=t?Qo(n.buffer):n.buffer;return new n.constructor(e,n.byteOffset,n.byteLength)}(n,e);case fn:case hn:case dn:case pn:case yn:case vn:case gn:case bn:case mn:return Xo(n,e);case J:return new i;case Y:case rn:return new i(n);case tn:return(a=new(o=n).constructor(o.source,Vn.exec(o))).lastIndex=o.lastIndex,a;case en:return new i;case on:return r=n,fr?et(fr.call(r)):{}}}(n,y,c)}}i||(i=new Rr);var g=i.get(n);if(g)return g;if(i.set(n,u),Iu(n))return n.forEach(function(r){u.add(jr(r,t,e,r,n,i))}),u;if(Mu(n))return n.forEach(function(r,o){u.set(o,jr(r,t,e,o,n,i))}),u;var b=f?a:(s?l?ka:Aa:l?ac:oc)(n);return Zt(b||n,function(r,o){b&&(r=n[o=r]),xr(u,o,jr(r,t,e,o,n,i))}),u}function Or(n,t,e){var r=e.length;if(null==n)return!r;for(n=et(n);r--;){var o=e[r],i=t[o],u=n[o];if(u===a&&!(o in n)||!i(u))return!1}return!0}function Dr(n,t,e){if("function"!=typeof n)throw new at(c);return oi(function(){n.apply(a,e)},t)}function Hr(n,t,e,r){var o=-1,a=Qt,u=!0,c=n.length,l=[],s=t.length;if(!c)return l;e&&(t=ne(t,ge(e))),r?(a=Xt,u=!1):t.length>=i&&(a=me,u=!1,t=new wr(t));n:for(;++o<c;){var f=n[o],h=null==e?f:e(f);if(f=r||0!==f?f:0,u&&h==h){for(var d=s;d--;)if(t[d]===h)continue n;l.push(f)}else a(t,h,r)||l.push(f)}return l}dr.templateSettings={escape:En,evaluate:xn,interpolate:Mn,variable:"",imports:{_:dr}},dr.prototype=yr.prototype,dr.prototype.constructor=dr,vr.prototype=pr(yr.prototype),vr.prototype.constructor=vr,gr.prototype=pr(yr.prototype),gr.prototype.constructor=gr,br.prototype.clear=function(){this.__data__=er?er(null):{},this.size=0},br.prototype.delete=function(n){var t=this.has(n)&&delete this.__data__[n];return this.size-=t?1:0,t},br.prototype.get=function(n){var t=this.__data__;if(er){var e=t[n];return e===l?a:e}return ft.call(t,n)?t[n]:a},br.prototype.has=function(n){var t=this.__data__;return er?t[n]!==a:ft.call(t,n)},br.prototype.set=function(n,t){var e=this.__data__;return this.size+=this.has(n)?0:1,e[n]=er&&t===a?l:t,this},mr.prototype.clear=function(){this.__data__=[],this.size=0},mr.prototype.delete=function(n){var t=this.__data__,e=Mr(t,n);return!(e<0||(e==t.length-1?t.pop():Ot.call(t,e,1),--this.size,0))},mr.prototype.get=function(n){var t=this.__data__,e=Mr(t,n);return e<0?a:t[e][1]},mr.prototype.has=function(n){return Mr(this.__data__,n)>-1},mr.prototype.set=function(n,t){var e=this.__data__,r=Mr(e,n);return r<0?(++this.size,e.push([n,t])):e[r][1]=t,this},_r.prototype.clear=function(){this.size=0,this.__data__={hash:new br,map:new(Qe||mr),string:new br}},_r.prototype.delete=function(n){var t=Da(this,n).delete(n);return this.size-=t?1:0,t},_r.prototype.get=function(n){return Da(this,n).get(n)},_r.prototype.has=function(n){return Da(this,n).has(n)},_r.prototype.set=function(n,t){var e=Da(this,n),r=e.size;return e.set(n,t),this.size+=e.size==r?0:1,this},wr.prototype.add=wr.prototype.push=function(n){return this.__data__.set(n,l),this},wr.prototype.has=function(n){return this.__data__.has(n)},Rr.prototype.clear=function(){this.__data__=new mr,this.size=0},Rr.prototype.delete=function(n){var t=this.__data__,e=t.delete(n);return this.size=t.size,e},Rr.prototype.get=function(n){return this.__data__.get(n)},Rr.prototype.has=function(n){return this.__data__.has(n)},Rr.prototype.set=function(n,t){var e=this.__data__;if(e instanceof mr){var r=e.__data__;if(!Qe||r.length<i-1)return r.push([n,t]),this.size=++e.size,this;e=this.__data__=new _r(r)}return e.set(n,t),this.size=e.size,this};var Nr=ua(Kr),zr=ua(Zr,!0);function Fr(n,t){var e=!0;return Nr(n,function(n,r,o){return e=!!t(n,r,o)}),e}function Wr(n,t,e){for(var r=-1,o=n.length;++r<o;){var i=n[r],u=t(i);if(null!=u&&(c===a?u==u&&!ju(u):e(u,c)))var c=u,l=i}return l}function Gr(n,t){var e=[];return Nr(n,function(n,r,o){t(n,r,o)&&e.push(n)}),e}function Vr(n,t,e,r,o){var a=-1,i=n.length;for(e||(e=Ua),o||(o=[]);++a<i;){var u=n[a];t>0&&e(u)?t>1?Vr(u,t-1,e,r,o):te(o,u):r||(o[o.length]=u)}return o}var Ur=ca(),$r=ca(!0);function Kr(n,t){return n&&Ur(n,t,oc)}function Zr(n,t){return n&&$r(n,t,oc)}function qr(n,t){return Yt(t,function(t){return Lu(n[t])})}function Jr(n,t){for(var e=0,r=(t=Ko(t,n)).length;null!=n&&e<r;)n=n[si(t[e++])];return e&&e==r?n:a}function Yr(n,t,e){var r=t(n);return gu(n)?r:te(r,e(n))}function Qr(n){return null==n?n===a?an:Q:ae&&ae in et(n)?function(n){var t=ft.call(n,ae),e=n[ae];try{n[ae]=a;var r=!0}catch(n){}var o=pt.call(n);return r&&(t?n[ae]=e:delete n[ae]),o}(n):function(n){return pt.call(n)}(n)}function Xr(n,t){return n>t}function no(n,t){return null!=n&&ft.call(n,t)}function to(n,t){return null!=n&&t in et(n)}function eo(n,t,e){for(var o=e?Xt:Qt,i=n[0].length,u=n.length,c=u,l=r(u),s=1/0,f=[];c--;){var h=n[c];c&&t&&(h=ne(h,ge(t))),s=$e(h.length,s),l[c]=!e&&(t||i>=120&&h.length>=120)?new wr(c&&h):a}h=n[0];var d=-1,p=l[0];n:for(;++d<i&&f.length<s;){var y=h[d],v=t?t(y):y;if(y=e||0!==y?y:0,!(p?me(p,v):o(f,v,e))){for(c=u;--c;){var g=l[c];if(!(g?me(g,v):o(n[c],v,e)))continue n}p&&p.push(v),f.push(y)}}return f}function ro(n,t,e){var r=null==(n=ti(n,t=Ko(t,n)))?n:n[si(Si(t))];return null==r?a:$t(r,n,e)}function oo(n){return xu(n)&&Qr(n)==F}function ao(n,t,e,r,o){return n===t||(null==n||null==t||!xu(n)&&!xu(t)?n!=n&&t!=t:function(n,t,e,r,o,i){var u=gu(n),c=gu(t),l=u?W:Wa(n),s=c?W:Wa(t),f=(l=l==F?X:l)==X,h=(s=s==F?X:s)==X,d=l==s;if(d&&wu(n)){if(!wu(t))return!1;u=!0,f=!1}if(d&&!f)return i||(i=new Rr),u||Ou(n)?Ma(n,t,e,r,o,i):function(n,t,e,r,o,a,i){switch(e){case sn:if(n.byteLength!=t.byteLength||n.byteOffset!=t.byteOffset)return!1;n=n.buffer,t=t.buffer;case ln:return!(n.byteLength!=t.byteLength||!a(new St(n),new St(t)));case V:case U:case Y:return du(+n,+t);case K:return n.name==t.name&&n.message==t.message;case tn:case rn:return n==t+"";case J:var u=Te;case en:var c=r&y;if(u||(u=Me),n.size!=t.size&&!c)return!1;var l=i.get(n);if(l)return l==t;r|=v,i.set(n,t);var s=Ma(u(n),u(t),r,o,a,i);return i.delete(n),s;case on:if(fr)return fr.call(n)==fr.call(t)}return!1}(n,t,l,e,r,o,i);if(!(e&y)){var p=f&&ft.call(n,"__wrapped__"),g=h&&ft.call(t,"__wrapped__");if(p||g){var b=p?n.value():n,m=g?t.value():t;return i||(i=new Rr),o(b,m,e,r,i)}}return!!d&&(i||(i=new Rr),function(n,t,e,r,o,i){var u=e&y,c=Aa(n),l=c.length,s=Aa(t).length;if(l!=s&&!u)return!1;for(var f=l;f--;){var h=c[f];if(!(u?h in t:ft.call(t,h)))return!1}var d=i.get(n);if(d&&i.get(t))return d==t;var p=!0;i.set(n,t),i.set(t,n);for(var v=u;++f<l;){h=c[f];var g=n[h],b=t[h];if(r)var m=u?r(b,g,h,t,n,i):r(g,b,h,n,t,i);if(!(m===a?g===b||o(g,b,e,r,i):m)){p=!1;break}v||(v="constructor"==h)}if(p&&!v){var _=n.constructor,w=t.constructor;_!=w&&"constructor"in n&&"constructor"in t&&!("function"==typeof _&&_ instanceof _&&"function"==typeof w&&w instanceof w)&&(p=!1)}return i.delete(n),i.delete(t),p}(n,t,e,r,o,i))}(n,t,e,r,ao,o))}function io(n,t,e,r){var o=e.length,i=o,u=!r;if(null==n)return!i;for(n=et(n);o--;){var c=e[o];if(u&&c[2]?c[1]!==n[c[0]]:!(c[0]in n))return!1}for(;++o<i;){var l=(c=e[o])[0],s=n[l],f=c[1];if(u&&c[2]){if(s===a&&!(l in n))return!1}else{var h=new Rr;if(r)var d=r(s,f,l,n,t,h);if(!(d===a?ao(f,s,y|v,r,h):d))return!1}}return!0}function uo(n){return!(!Eu(n)||(t=n,dt&&dt in t))&&(Lu(n)?gt:Kn).test(fi(n));var t}function co(n){return"function"==typeof n?n:null==n?Cc:"object"==typeof n?gu(n)?yo(n[0],n[1]):po(n):Nc(n)}function lo(n){if(!Ya(n))return Ve(n);var t=[];for(var e in et(n))ft.call(n,e)&&"constructor"!=e&&t.push(e);return t}function so(n){if(!Eu(n))return function(n){var t=[];if(null!=n)for(var e in et(n))t.push(e);return t}(n);var t=Ya(n),e=[];for(var r in n)("constructor"!=r||!t&&ft.call(n,r))&&e.push(r);return e}function fo(n,t){return n<t}function ho(n,t){var e=-1,o=mu(n)?r(n.length):[];return Nr(n,function(n,r,a){o[++e]=t(n,r,a)}),o}function po(n){var t=Ha(n);return 1==t.length&&t[0][2]?Xa(t[0][0],t[0][1]):function(e){return e===n||io(e,n,t)}}function yo(n,t){return Za(n)&&Qa(t)?Xa(si(n),t):function(e){var r=Xu(e,n);return r===a&&r===t?nc(e,n):ao(t,r,y|v)}}function vo(n,t,e,r,o){n!==t&&Ur(t,function(i,u){if(Eu(i))o||(o=new Rr),function(n,t,e,r,o,i,u){var c=ei(n,e),l=ei(t,e),s=u.get(l);if(s)Er(n,e,s);else{var f=i?i(c,l,e+"",n,t,u):a,h=f===a;if(h){var d=gu(l),p=!d&&wu(l),y=!d&&!p&&Ou(l);f=l,d||p||y?gu(c)?f=c:_u(c)?f=ra(c):p?(h=!1,f=Yo(l,!0)):y?(h=!1,f=Xo(l,!0)):f=[]:Au(l)||vu(l)?(f=c,vu(c)?f=Vu(c):Eu(c)&&!Lu(c)||(f=Va(l))):h=!1}h&&(u.set(l,f),o(f,l,r,i,u),u.delete(l)),Er(n,e,f)}}(n,t,u,e,vo,r,o);else{var c=r?r(ei(n,u),i,u+"",n,t,o):a;c===a&&(c=i),Er(n,u,c)}},ac)}function go(n,t){var e=n.length;if(e)return $a(t+=t<0?e:0,e)?n[t]:a}function bo(n,t,e){var r=-1;return t=ne(t.length?t:[Cc],ge(Oa())),function(n,t){var e=n.length;for(n.sort(t);e--;)n[e]=n[e].value;return n}(ho(n,function(n,e,o){return{criteria:ne(t,function(t){return t(n)}),index:++r,value:n}}),function(n,t){return function(n,t,e){for(var r=-1,o=n.criteria,a=t.criteria,i=o.length,u=e.length;++r<i;){var c=na(o[r],a[r]);if(c){if(r>=u)return c;var l=e[r];return c*("desc"==l?-1:1)}}return n.index-t.index}(n,t,e)})}function mo(n,t,e){for(var r=-1,o=t.length,a={};++r<o;){var i=t[r],u=Jr(n,i);e(u,i)&&Eo(a,Ko(i,n),u)}return a}function _o(n,t,e,r){var o=r?le:ce,a=-1,i=t.length,u=n;for(n===t&&(t=ra(t)),e&&(u=ne(n,ge(e)));++a<i;)for(var c=0,l=t[a],s=e?e(l):l;(c=o(u,s,c,r))>-1;)u!==n&&Ot.call(u,c,1),Ot.call(n,c,1);return n}function wo(n,t){for(var e=n?t.length:0,r=e-1;e--;){var o=t[e];if(e==r||o!==a){var a=o;$a(o)?Ot.call(n,o,1):No(n,o)}}return n}function Ro(n,t){return n+Ne(qe()*(t-n+1))}function So(n,t){var e="";if(!n||t<1||t>P)return e;do{t%2&&(e+=n),(t=Ne(t/2))&&(n+=n)}while(t);return e}function Lo(n,t){return ai(ni(n,t,Cc),n+"")}function Bo(n){return Lr(dc(n))}function To(n,t){var e=dc(n);return ci(e,Pr(t,0,e.length))}function Eo(n,t,e,r){if(!Eu(n))return n;for(var o=-1,i=(t=Ko(t,n)).length,u=i-1,c=n;null!=c&&++o<i;){var l=si(t[o]),s=e;if(o!=u){var f=c[l];(s=r?r(f,l,c):a)===a&&(s=Eu(f)?f:$a(t[o+1])?[]:{})}xr(c,l,s),c=c[l]}return n}var xo=rr?function(n,t){return rr.set(n,t),n}:Cc,Mo=de?function(n,t){return de(n,"toString",{configurable:!0,enumerable:!1,value:Ec(t),writable:!0})}:Cc;function Co(n){return ci(dc(n))}function Ao(n,t,e){var o=-1,a=n.length;t<0&&(t=-t>a?0:a+t),(e=e>a?a:e)<0&&(e+=a),a=t>e?0:e-t>>>0,t>>>=0;for(var i=r(a);++o<a;)i[o]=n[o+t];return i}function ko(n,t){var e;return Nr(n,function(n,r,o){return!(e=t(n,r,o))}),!!e}function Io(n,t,e){var r=0,o=null==n?r:n.length;if("number"==typeof t&&t==t&&o<=N){for(;r<o;){var a=r+o>>>1,i=n[a];null!==i&&!ju(i)&&(e?i<=t:i<t)?r=a+1:o=a}return o}return Po(n,t,Cc,e)}function Po(n,t,e,r){t=e(t);for(var o=0,i=null==n?0:n.length,u=t!=t,c=null===t,l=ju(t),s=t===a;o<i;){var f=Ne((o+i)/2),h=e(n[f]),d=h!==a,p=null===h,y=h==h,v=ju(h);if(u)var g=r||y;else g=s?y&&(r||d):c?y&&d&&(r||!p):l?y&&d&&!p&&(r||!v):!p&&!v&&(r?h<=t:h<t);g?o=f+1:i=f}return $e(i,H)}function jo(n,t){for(var e=-1,r=n.length,o=0,a=[];++e<r;){var i=n[e],u=t?t(i):i;if(!e||!du(u,c)){var c=u;a[o++]=0===i?0:i}}return a}function Oo(n){return"number"==typeof n?n:ju(n)?O:+n}function Do(n){if("string"==typeof n)return n;if(gu(n))return ne(n,Do)+"";if(ju(n))return hr?hr.call(n):"";var t=n+"";return"0"==t&&1/n==-I?"-0":t}function Ho(n,t,e){var r=-1,o=Qt,a=n.length,u=!0,c=[],l=c;if(e)u=!1,o=Xt;else if(a>=i){var s=t?null:Sa(n);if(s)return Me(s);u=!1,o=me,l=new wr}else l=t?[]:c;n:for(;++r<a;){var f=n[r],h=t?t(f):f;if(f=e||0!==f?f:0,u&&h==h){for(var d=l.length;d--;)if(l[d]===h)continue n;t&&l.push(h),c.push(f)}else o(l,h,e)||(l!==c&&l.push(h),c.push(f))}return c}function No(n,t){return null==(n=ti(n,t=Ko(t,n)))||delete n[si(Si(t))]}function zo(n,t,e,r){return Eo(n,t,e(Jr(n,t)),r)}function Fo(n,t,e,r){for(var o=n.length,a=r?o:-1;(r?a--:++a<o)&&t(n[a],a,n););return e?Ao(n,r?0:a,r?a+1:o):Ao(n,r?a+1:0,r?o:a)}function Wo(n,t){var e=n;return e instanceof gr&&(e=e.value()),ee(t,function(n,t){return t.func.apply(t.thisArg,te([n],t.args))},e)}function Go(n,t,e){var o=n.length;if(o<2)return o?Ho(n[0]):[];for(var a=-1,i=r(o);++a<o;)for(var u=n[a],c=-1;++c<o;)c!=a&&(i[a]=Hr(i[a]||u,n[c],t,e));return Ho(Vr(i,1),t,e)}function Vo(n,t,e){for(var r=-1,o=n.length,i=t.length,u={};++r<o;){var c=r<i?t[r]:a;e(u,n[r],c)}return u}function Uo(n){return _u(n)?n:[]}function $o(n){return"function"==typeof n?n:Cc}function Ko(n,t){return gu(n)?n:Za(n,t)?[n]:li(Uu(n))}var Zo=Lo;function qo(n,t,e){var r=n.length;return e=e===a?r:e,!t&&e>=r?n:Ao(n,t,e)}var Jo=je||function(n){return Pt.clearTimeout(n)};function Yo(n,t){if(t)return n.slice();var e=n.length,r=Mt?Mt(e):new n.constructor(e);return n.copy(r),r}function Qo(n){var t=new n.constructor(n.byteLength);return new St(t).set(new St(n)),t}function Xo(n,t){var e=t?Qo(n.buffer):n.buffer;return new n.constructor(e,n.byteOffset,n.length)}function na(n,t){if(n!==t){var e=n!==a,r=null===n,o=n==n,i=ju(n),u=t!==a,c=null===t,l=t==t,s=ju(t);if(!c&&!s&&!i&&n>t||i&&u&&l&&!c&&!s||r&&u&&l||!e&&l||!o)return 1;if(!r&&!i&&!s&&n<t||s&&e&&o&&!r&&!i||c&&e&&o||!u&&o||!l)return-1}return 0}function ta(n,t,e,o){for(var a=-1,i=n.length,u=e.length,c=-1,l=t.length,s=Ue(i-u,0),f=r(l+s),h=!o;++c<l;)f[c]=t[c];for(;++a<u;)(h||a<i)&&(f[e[a]]=n[a]);for(;s--;)f[c++]=n[a++];return f}function ea(n,t,e,o){for(var a=-1,i=n.length,u=-1,c=e.length,l=-1,s=t.length,f=Ue(i-c,0),h=r(f+s),d=!o;++a<f;)h[a]=n[a];for(var p=a;++l<s;)h[p+l]=t[l];for(;++u<c;)(d||a<i)&&(h[p+e[u]]=n[a++]);return h}function ra(n,t){var e=-1,o=n.length;for(t||(t=r(o));++e<o;)t[e]=n[e];return t}function oa(n,t,e,r){var o=!e;e||(e={});for(var i=-1,u=t.length;++i<u;){var c=t[i],l=r?r(e[c],n[c],c,e,n):a;l===a&&(l=n[c]),o?kr(e,c,l):xr(e,c,l)}return e}function aa(n,t){return function(e,r){var o=gu(e)?Kt:Cr,a=t?t():{};return o(e,n,Oa(r,2),a)}}function ia(n){return Lo(function(t,e){var r=-1,o=e.length,i=o>1?e[o-1]:a,u=o>2?e[2]:a;for(i=n.length>3&&"function"==typeof i?(o--,i):a,u&&Ka(e[0],e[1],u)&&(i=o<3?a:i,o=1),t=et(t);++r<o;){var c=e[r];c&&n(t,c,r,i)}return t})}function ua(n,t){return function(e,r){if(null==e)return e;if(!mu(e))return n(e,r);for(var o=e.length,a=t?o:-1,i=et(e);(t?a--:++a<o)&&!1!==r(i[a],a,i););return e}}function ca(n){return function(t,e,r){for(var o=-1,a=et(t),i=r(t),u=i.length;u--;){var c=i[n?u:++o];if(!1===e(a[c],c,a))break}return t}}function la(n){return function(t){var e=Be(t=Uu(t))?ke(t):a,r=e?e[0]:t.charAt(0),o=e?qo(e,1).join(""):t.slice(1);return r[n]()+o}}function sa(n){return function(t){return ee(Lc(vc(t).replace(mt,"")),n,"")}}function fa(n){return function(){var t=arguments;switch(t.length){case 0:return new n;case 1:return new n(t[0]);case 2:return new n(t[0],t[1]);case 3:return new n(t[0],t[1],t[2]);case 4:return new n(t[0],t[1],t[2],t[3]);case 5:return new n(t[0],t[1],t[2],t[3],t[4]);case 6:return new n(t[0],t[1],t[2],t[3],t[4],t[5]);case 7:return new n(t[0],t[1],t[2],t[3],t[4],t[5],t[6])}var e=pr(n.prototype),r=n.apply(e,t);return Eu(r)?r:e}}function ha(n){return function(t,e,r){var o=et(t);if(!mu(t)){var i=Oa(e,3);t=oc(t),e=function(n){return i(o[n],n,o)}}var u=n(t,e,r);return u>-1?o[i?t[u]:u]:a}}function da(n){return Ca(function(t){var e=t.length,r=e,o=vr.prototype.thru;for(n&&t.reverse();r--;){var i=t[r];if("function"!=typeof i)throw new at(c);if(o&&!u&&"wrapper"==Pa(i))var u=new vr([],!0)}for(r=u?r:e;++r<e;){var l=Pa(i=t[r]),s="wrapper"==l?Ia(i):a;u=s&&qa(s[0])&&s[1]==(L|_|R|B)&&!s[4].length&&1==s[9]?u[Pa(s[0])].apply(u,s[3]):1==i.length&&qa(i)?u[l]():u.thru(i)}return function(){var n=arguments,r=n[0];if(u&&1==n.length&&gu(r))return u.plant(r).value();for(var o=0,a=e?t[o].apply(this,n):r;++o<e;)a=t[o].call(this,a);return a}})}function pa(n,t,e,o,i,u,c,l,s,f){var h=t&L,d=t&g,p=t&b,y=t&(_|w),v=t&T,m=p?a:fa(n);return function g(){for(var b=arguments.length,_=r(b),w=b;w--;)_[w]=arguments[w];if(y)var R=ja(g),S=function(n,t){for(var e=n.length,r=0;e--;)n[e]===t&&++r;return r}(_,R);if(o&&(_=ta(_,o,i,y)),u&&(_=ea(_,u,c,y)),b-=S,y&&b<f){var L=xe(_,R);return wa(n,t,pa,g.placeholder,e,_,L,l,s,f-b)}var B=d?e:this,T=p?B[n]:n;return b=_.length,l?_=function(n,t){for(var e=n.length,r=$e(t.length,e),o=ra(n);r--;){var i=t[r];n[r]=$a(i,e)?o[i]:a}return n}(_,l):v&&b>1&&_.reverse(),h&&s<b&&(_.length=s),this&&this!==Pt&&this instanceof g&&(T=m||fa(T)),T.apply(B,_)}}function ya(n,t){return function(e,r){return function(n,t,e,r){return Kr(n,function(n,o,a){t(r,e(n),o,a)}),r}(e,n,t(r),{})}}function va(n,t){return function(e,r){var o;if(e===a&&r===a)return t;if(e!==a&&(o=e),r!==a){if(o===a)return r;"string"==typeof e||"string"==typeof r?(e=Do(e),r=Do(r)):(e=Oo(e),r=Oo(r)),o=n(e,r)}return o}}function ga(n){return Ca(function(t){return t=ne(t,ge(Oa())),Lo(function(e){var r=this;return n(t,function(n){return $t(n,r,e)})})})}function ba(n,t){var e=(t=t===a?" ":Do(t)).length;if(e<2)return e?So(t,n):t;var r=So(t,He(n/Ae(t)));return Be(t)?qo(ke(r),0,n).join(""):r.slice(0,n)}function ma(n){return function(t,e,o){return o&&"number"!=typeof o&&Ka(t,e,o)&&(e=o=a),t=zu(t),e===a?(e=t,t=0):e=zu(e),function(n,t,e,o){for(var a=-1,i=Ue(He((t-n)/(e||1)),0),u=r(i);i--;)u[o?i:++a]=n,n+=e;return u}(t,e,o=o===a?t<e?1:-1:zu(o),n)}}function _a(n){return function(t,e){return"string"==typeof t&&"string"==typeof e||(t=Gu(t),e=Gu(e)),n(t,e)}}function wa(n,t,e,r,o,i,u,c,l,s){var f=t&_;t|=f?R:S,(t&=~(f?S:R))&m||(t&=~(g|b));var h=[n,t,o,f?i:a,f?u:a,f?a:i,f?a:u,c,l,s],d=e.apply(a,h);return qa(n)&&ri(d,h),d.placeholder=r,ii(d,n,t)}function Ra(n){var t=tt[n];return function(n,e){if(n=Gu(n),e=null==e?0:$e(Fu(e),292)){var r=(Uu(n)+"e").split("e");return+((r=(Uu(t(r[0]+"e"+(+r[1]+e)))+"e").split("e"))[0]+"e"+(+r[1]-e))}return t(n)}}var Sa=nr&&1/Me(new nr([,-0]))[1]==I?function(n){return new nr(n)}:jc;function La(n){return function(t){var e=Wa(t);return e==J?Te(t):e==en?Ce(t):function(n,t){return ne(t,function(t){return[t,n[t]]})}(t,n(t))}}function Ba(n,t,e,o,i,u,l,s){var h=t&b;if(!h&&"function"!=typeof n)throw new at(c);var d=o?o.length:0;if(d||(t&=~(R|S),o=i=a),l=l===a?l:Ue(Fu(l),0),s=s===a?s:Fu(s),d-=i?i.length:0,t&S){var p=o,y=i;o=i=a}var v=h?a:Ia(n),T=[n,t,e,o,i,p,y,u,l,s];if(v&&function(n,t){var e=n[1],r=t[1],o=e|r,a=o<(g|b|L),i=r==L&&e==_||r==L&&e==B&&n[7].length<=t[8]||r==(L|B)&&t[7].length<=t[8]&&e==_;if(!a&&!i)return n;r&g&&(n[2]=t[2],o|=e&g?0:m);var u=t[3];if(u){var c=n[3];n[3]=c?ta(c,u,t[4]):u,n[4]=c?xe(n[3],f):t[4]}(u=t[5])&&(c=n[5],n[5]=c?ea(c,u,t[6]):u,n[6]=c?xe(n[5],f):t[6]),(u=t[7])&&(n[7]=u),r&L&&(n[8]=null==n[8]?t[8]:$e(n[8],t[8])),null==n[9]&&(n[9]=t[9]),n[0]=t[0],n[1]=o}(T,v),n=T[0],t=T[1],e=T[2],o=T[3],i=T[4],!(s=T[9]=T[9]===a?h?0:n.length:Ue(T[9]-d,0))&&t&(_|w)&&(t&=~(_|w)),t&&t!=g)E=t==_||t==w?function(n,t,e){var o=fa(n);return function i(){for(var u=arguments.length,c=r(u),l=u,s=ja(i);l--;)c[l]=arguments[l];var f=u<3&&c[0]!==s&&c[u-1]!==s?[]:xe(c,s);return(u-=f.length)<e?wa(n,t,pa,i.placeholder,a,c,f,a,a,e-u):$t(this&&this!==Pt&&this instanceof i?o:n,this,c)}}(n,t,s):t!=R&&t!=(g|R)||i.length?pa.apply(a,T):function(n,t,e,o){var a=t&g,i=fa(n);return function t(){for(var u=-1,c=arguments.length,l=-1,s=o.length,f=r(s+c),h=this&&this!==Pt&&this instanceof t?i:n;++l<s;)f[l]=o[l];for(;c--;)f[l++]=arguments[++u];return $t(h,a?e:this,f)}}(n,t,e,o);else var E=function(n,t,e){var r=t&g,o=fa(n);return function t(){return(this&&this!==Pt&&this instanceof t?o:n).apply(r?e:this,arguments)}}(n,t,e);return ii((v?xo:ri)(E,T),n,t)}function Ta(n,t,e,r){return n===a||du(n,ct[e])&&!ft.call(r,e)?t:n}function Ea(n,t,e,r,o,i){return Eu(n)&&Eu(t)&&(i.set(t,n),vo(n,t,a,Ea,i),i.delete(t)),n}function xa(n){return Au(n)?a:n}function Ma(n,t,e,r,o,i){var u=e&y,c=n.length,l=t.length;if(c!=l&&!(u&&l>c))return!1;var s=i.get(n);if(s&&i.get(t))return s==t;var f=-1,h=!0,d=e&v?new wr:a;for(i.set(n,t),i.set(t,n);++f<c;){var p=n[f],g=t[f];if(r)var b=u?r(g,p,f,t,n,i):r(p,g,f,n,t,i);if(b!==a){if(b)continue;h=!1;break}if(d){if(!oe(t,function(n,t){if(!me(d,t)&&(p===n||o(p,n,e,r,i)))return d.push(t)})){h=!1;break}}else if(p!==g&&!o(p,g,e,r,i)){h=!1;break}}return i.delete(n),i.delete(t),h}function Ca(n){return ai(ni(n,a,bi),n+"")}function Aa(n){return Yr(n,oc,za)}function ka(n){return Yr(n,ac,Fa)}var Ia=rr?function(n){return rr.get(n)}:jc;function Pa(n){for(var t=n.name+"",e=or[t],r=ft.call(or,t)?e.length:0;r--;){var o=e[r],a=o.func;if(null==a||a==n)return o.name}return t}function ja(n){return(ft.call(dr,"placeholder")?dr:n).placeholder}function Oa(){var n=dr.iteratee||Ac;return n=n===Ac?co:n,arguments.length?n(arguments[0],arguments[1]):n}function Da(n,t){var e,r,o=n.__data__;return("string"==(r=typeof(e=t))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==e:null===e)?o["string"==typeof t?"string":"hash"]:o.map}function Ha(n){for(var t=oc(n),e=t.length;e--;){var r=t[e],o=n[r];t[e]=[r,o,Qa(o)]}return t}function Na(n,t){var e=function(n,t){return null==n?a:n[t]}(n,t);return uo(e)?e:a}var za=ze?function(n){return null==n?[]:(n=et(n),Yt(ze(n),function(t){return jt.call(n,t)}))}:Wc,Fa=ze?function(n){for(var t=[];n;)te(t,za(n)),n=kt(n);return t}:Wc,Wa=Qr;function Ga(n,t,e){for(var r=-1,o=(t=Ko(t,n)).length,a=!1;++r<o;){var i=si(t[r]);if(!(a=null!=n&&e(n,i)))break;n=n[i]}return a||++r!=o?a:!!(o=null==n?0:n.length)&&Tu(o)&&$a(i,o)&&(gu(n)||vu(n))}function Va(n){return"function"!=typeof n.constructor||Ya(n)?{}:pr(kt(n))}function Ua(n){return gu(n)||vu(n)||!!(Ht&&n&&n[Ht])}function $a(n,t){var e=typeof n;return!!(t=null==t?P:t)&&("number"==e||"symbol"!=e&&qn.test(n))&&n>-1&&n%1==0&&n<t}function Ka(n,t,e){if(!Eu(e))return!1;var r=typeof t;return!!("number"==r?mu(e)&&$a(t,e.length):"string"==r&&t in e)&&du(e[t],n)}function Za(n,t){if(gu(n))return!1;var e=typeof n;return!("number"!=e&&"symbol"!=e&&"boolean"!=e&&null!=n&&!ju(n))||An.test(n)||!Cn.test(n)||null!=t&&n in et(t)}function qa(n){var t=Pa(n),e=dr[t];if("function"!=typeof e||!(t in gr.prototype))return!1;if(n===e)return!0;var r=Ia(e);return!!r&&n===r[0]}(Ye&&Wa(new Ye(new ArrayBuffer(1)))!=sn||Qe&&Wa(new Qe)!=J||Xe&&"[object Promise]"!=Wa(Xe.resolve())||nr&&Wa(new nr)!=en||tr&&Wa(new tr)!=un)&&(Wa=function(n){var t=Qr(n),e=t==X?n.constructor:a,r=e?fi(e):"";if(r)switch(r){case ar:return sn;case ir:return J;case ur:return"[object Promise]";case cr:return en;case lr:return un}return t});var Ja=lt?Lu:Gc;function Ya(n){var t=n&&n.constructor;return n===("function"==typeof t&&t.prototype||ct)}function Qa(n){return n==n&&!Eu(n)}function Xa(n,t){return function(e){return null!=e&&e[n]===t&&(t!==a||n in et(e))}}function ni(n,t,e){return t=Ue(t===a?n.length-1:t,0),function(){for(var o=arguments,a=-1,i=Ue(o.length-t,0),u=r(i);++a<i;)u[a]=o[t+a];a=-1;for(var c=r(t+1);++a<t;)c[a]=o[a];return c[t]=e(u),$t(n,this,c)}}function ti(n,t){return t.length<2?n:Jr(n,Ao(t,0,-1))}function ei(n,t){if("__proto__"!=t)return n[t]}var ri=ui(xo),oi=De||function(n,t){return Pt.setTimeout(n,t)},ai=ui(Mo);function ii(n,t,e){var r=t+"";return ai(n,function(n,t){var e=t.length;if(!e)return n;var r=e-1;return t[r]=(e>1?"& ":"")+t[r],t=t.join(e>2?", ":" "),n.replace(Hn,"{\n/* [wrapped with "+t+"] */\n")}(r,function(n,t){return Zt(z,function(e){var r="_."+e[0];t&e[1]&&!Qt(n,r)&&n.push(r)}),n.sort()}(function(n){var t=n.match(Nn);return t?t[1].split(zn):[]}(r),e)))}function ui(n){var t=0,e=0;return function(){var r=Ke(),o=C-(r-e);if(e=r,o>0){if(++t>=M)return arguments[0]}else t=0;return n.apply(a,arguments)}}function ci(n,t){var e=-1,r=n.length,o=r-1;for(t=t===a?r:t;++e<t;){var i=Ro(e,o),u=n[i];n[i]=n[e],n[e]=u}return n.length=t,n}var li=function(n){var t=uu(n,function(n){return e.size===s&&e.clear(),n}),e=t.cache;return t}(function(n){var t=[];return 46===n.charCodeAt(0)&&t.push(""),n.replace(kn,function(n,e,r,o){t.push(r?o.replace(Wn,"$1"):e||n)}),t});function si(n){if("string"==typeof n||ju(n))return n;var t=n+"";return"0"==t&&1/n==-I?"-0":t}function fi(n){if(null!=n){try{return st.call(n)}catch(n){}try{return n+""}catch(n){}}return""}function hi(n){if(n instanceof gr)return n.clone();var t=new vr(n.__wrapped__,n.__chain__);return t.__actions__=ra(n.__actions__),t.__index__=n.__index__,t.__values__=n.__values__,t}var di=Lo(function(n,t){return _u(n)?Hr(n,Vr(t,1,_u,!0)):[]}),pi=Lo(function(n,t){var e=Si(t);return _u(e)&&(e=a),_u(n)?Hr(n,Vr(t,1,_u,!0),Oa(e,2)):[]}),yi=Lo(function(n,t){var e=Si(t);return _u(e)&&(e=a),_u(n)?Hr(n,Vr(t,1,_u,!0),a,e):[]});function vi(n,t,e){var r=null==n?0:n.length;if(!r)return-1;var o=null==e?0:Fu(e);return o<0&&(o=Ue(r+o,0)),ue(n,Oa(t,3),o)}function gi(n,t,e){var r=null==n?0:n.length;if(!r)return-1;var o=r-1;return e!==a&&(o=Fu(e),o=e<0?Ue(r+o,0):$e(o,r-1)),ue(n,Oa(t,3),o,!0)}function bi(n){return null!=n&&n.length?Vr(n,1):[]}function mi(n){return n&&n.length?n[0]:a}var _i=Lo(function(n){var t=ne(n,Uo);return t.length&&t[0]===n[0]?eo(t):[]}),wi=Lo(function(n){var t=Si(n),e=ne(n,Uo);return t===Si(e)?t=a:e.pop(),e.length&&e[0]===n[0]?eo(e,Oa(t,2)):[]}),Ri=Lo(function(n){var t=Si(n),e=ne(n,Uo);return(t="function"==typeof t?t:a)&&e.pop(),e.length&&e[0]===n[0]?eo(e,a,t):[]});function Si(n){var t=null==n?0:n.length;return t?n[t-1]:a}var Li=Lo(Bi);function Bi(n,t){return n&&n.length&&t&&t.length?_o(n,t):n}var Ti=Ca(function(n,t){var e=null==n?0:n.length,r=Ir(n,t);return wo(n,ne(t,function(n){return $a(n,e)?+n:n}).sort(na)),r});function Ei(n){return null==n?n:Je.call(n)}var xi=Lo(function(n){return Ho(Vr(n,1,_u,!0))}),Mi=Lo(function(n){var t=Si(n);return _u(t)&&(t=a),Ho(Vr(n,1,_u,!0),Oa(t,2))}),Ci=Lo(function(n){var t=Si(n);return t="function"==typeof t?t:a,Ho(Vr(n,1,_u,!0),a,t)});function Ai(n){if(!n||!n.length)return[];var t=0;return n=Yt(n,function(n){if(_u(n))return t=Ue(n.length,t),!0}),ve(t,function(t){return ne(n,he(t))})}function ki(n,t){if(!n||!n.length)return[];var e=Ai(n);return null==t?e:ne(e,function(n){return $t(t,a,n)})}var Ii=Lo(function(n,t){return _u(n)?Hr(n,t):[]}),Pi=Lo(function(n){return Go(Yt(n,_u))}),ji=Lo(function(n){var t=Si(n);return _u(t)&&(t=a),Go(Yt(n,_u),Oa(t,2))}),Oi=Lo(function(n){var t=Si(n);return t="function"==typeof t?t:a,Go(Yt(n,_u),a,t)}),Di=Lo(Ai);var Hi=Lo(function(n){var t=n.length,e=t>1?n[t-1]:a;return e="function"==typeof e?(n.pop(),e):a,ki(n,e)});function Ni(n){var t=dr(n);return t.__chain__=!0,t}function zi(n,t){return t(n)}var Fi=Ca(function(n){var t=n.length,e=t?n[0]:0,r=this.__wrapped__,o=function(t){return Ir(t,n)};return!(t>1||this.__actions__.length)&&r instanceof gr&&$a(e)?((r=r.slice(e,+e+(t?1:0))).__actions__.push({func:zi,args:[o],thisArg:a}),new vr(r,this.__chain__).thru(function(n){return t&&!n.length&&n.push(a),n})):this.thru(o)});var Wi=aa(function(n,t,e){ft.call(n,e)?++n[e]:kr(n,e,1)});var Gi=ha(vi),Vi=ha(gi);function Ui(n,t){return(gu(n)?Zt:Nr)(n,Oa(t,3))}function $i(n,t){return(gu(n)?qt:zr)(n,Oa(t,3))}var Ki=aa(function(n,t,e){ft.call(n,e)?n[e].push(t):kr(n,e,[t])});var Zi=Lo(function(n,t,e){var o=-1,a="function"==typeof t,i=mu(n)?r(n.length):[];return Nr(n,function(n){i[++o]=a?$t(t,n,e):ro(n,t,e)}),i}),qi=aa(function(n,t,e){kr(n,e,t)});function Ji(n,t){return(gu(n)?ne:ho)(n,Oa(t,3))}var Yi=aa(function(n,t,e){n[e?0:1].push(t)},function(){return[[],[]]});var Qi=Lo(function(n,t){if(null==n)return[];var e=t.length;return e>1&&Ka(n,t[0],t[1])?t=[]:e>2&&Ka(t[0],t[1],t[2])&&(t=[t[0]]),bo(n,Vr(t,1),[])}),Xi=Oe||function(){return Pt.Date.now()};function nu(n,t,e){return t=e?a:t,t=n&&null==t?n.length:t,Ba(n,L,a,a,a,a,t)}function tu(n,t){var e;if("function"!=typeof t)throw new at(c);return n=Fu(n),function(){return--n>0&&(e=t.apply(this,arguments)),n<=1&&(t=a),e}}var eu=Lo(function(n,t,e){var r=g;if(e.length){var o=xe(e,ja(eu));r|=R}return Ba(n,r,t,e,o)}),ru=Lo(function(n,t,e){var r=g|b;if(e.length){var o=xe(e,ja(ru));r|=R}return Ba(t,r,n,e,o)});function ou(n,t,e){var r,o,i,u,l,s,f=0,h=!1,d=!1,p=!0;if("function"!=typeof n)throw new at(c);function y(t){var e=r,i=o;return r=o=a,f=t,u=n.apply(i,e)}function v(n){var e=n-s;return s===a||e>=t||e<0||d&&n-f>=i}function g(){var n=Xi();if(v(n))return b(n);l=oi(g,function(n){var e=t-(n-s);return d?$e(e,i-(n-f)):e}(n))}function b(n){return l=a,p&&r?y(n):(r=o=a,u)}function m(){var n=Xi(),e=v(n);if(r=arguments,o=this,s=n,e){if(l===a)return function(n){return f=n,l=oi(g,t),h?y(n):u}(s);if(d)return l=oi(g,t),y(s)}return l===a&&(l=oi(g,t)),u}return t=Gu(t)||0,Eu(e)&&(h=!!e.leading,i=(d="maxWait"in e)?Ue(Gu(e.maxWait)||0,t):i,p="trailing"in e?!!e.trailing:p),m.cancel=function(){l!==a&&Jo(l),f=0,r=s=o=l=a},m.flush=function(){return l===a?u:b(Xi())},m}var au=Lo(function(n,t){return Dr(n,1,t)}),iu=Lo(function(n,t,e){return Dr(n,Gu(t)||0,e)});function uu(n,t){if("function"!=typeof n||null!=t&&"function"!=typeof t)throw new at(c);var e=function(){var r=arguments,o=t?t.apply(this,r):r[0],a=e.cache;if(a.has(o))return a.get(o);var i=n.apply(this,r);return e.cache=a.set(o,i)||a,i};return e.cache=new(uu.Cache||_r),e}function cu(n){if("function"!=typeof n)throw new at(c);return function(){var t=arguments;switch(t.length){case 0:return!n.call(this);case 1:return!n.call(this,t[0]);case 2:return!n.call(this,t[0],t[1]);case 3:return!n.call(this,t[0],t[1],t[2])}return!n.apply(this,t)}}uu.Cache=_r;var lu=Zo(function(n,t){var e=(t=1==t.length&&gu(t[0])?ne(t[0],ge(Oa())):ne(Vr(t,1),ge(Oa()))).length;return Lo(function(r){for(var o=-1,a=$e(r.length,e);++o<a;)r[o]=t[o].call(this,r[o]);return $t(n,this,r)})}),su=Lo(function(n,t){var e=xe(t,ja(su));return Ba(n,R,a,t,e)}),fu=Lo(function(n,t){var e=xe(t,ja(fu));return Ba(n,S,a,t,e)}),hu=Ca(function(n,t){return Ba(n,B,a,a,a,t)});function du(n,t){return n===t||n!=n&&t!=t}var pu=_a(Xr),yu=_a(function(n,t){return n>=t}),vu=oo(function(){return arguments}())?oo:function(n){return xu(n)&&ft.call(n,"callee")&&!jt.call(n,"callee")},gu=r.isArray,bu=zt?ge(zt):function(n){return xu(n)&&Qr(n)==ln};function mu(n){return null!=n&&Tu(n.length)&&!Lu(n)}function _u(n){return xu(n)&&mu(n)}var wu=Fe||Gc,Ru=Ft?ge(Ft):function(n){return xu(n)&&Qr(n)==U};function Su(n){if(!xu(n))return!1;var t=Qr(n);return t==K||t==$||"string"==typeof n.message&&"string"==typeof n.name&&!Au(n)}function Lu(n){if(!Eu(n))return!1;var t=Qr(n);return t==Z||t==q||t==G||t==nn}function Bu(n){return"number"==typeof n&&n==Fu(n)}function Tu(n){return"number"==typeof n&&n>-1&&n%1==0&&n<=P}function Eu(n){var t=typeof n;return null!=n&&("object"==t||"function"==t)}function xu(n){return null!=n&&"object"==typeof n}var Mu=Wt?ge(Wt):function(n){return xu(n)&&Wa(n)==J};function Cu(n){return"number"==typeof n||xu(n)&&Qr(n)==Y}function Au(n){if(!xu(n)||Qr(n)!=X)return!1;var t=kt(n);if(null===t)return!0;var e=ft.call(t,"constructor")&&t.constructor;return"function"==typeof e&&e instanceof e&&st.call(e)==yt}var ku=Gt?ge(Gt):function(n){return xu(n)&&Qr(n)==tn};var Iu=Vt?ge(Vt):function(n){return xu(n)&&Wa(n)==en};function Pu(n){return"string"==typeof n||!gu(n)&&xu(n)&&Qr(n)==rn}function ju(n){return"symbol"==typeof n||xu(n)&&Qr(n)==on}var Ou=Ut?ge(Ut):function(n){return xu(n)&&Tu(n.length)&&!!Et[Qr(n)]};var Du=_a(fo),Hu=_a(function(n,t){return n<=t});function Nu(n){if(!n)return[];if(mu(n))return Pu(n)?ke(n):ra(n);if(Nt&&n[Nt])return function(n){for(var t,e=[];!(t=n.next()).done;)e.push(t.value);return e}(n[Nt]());var t=Wa(n);return(t==J?Te:t==en?Me:dc)(n)}function zu(n){return n?(n=Gu(n))===I||n===-I?(n<0?-1:1)*j:n==n?n:0:0===n?n:0}function Fu(n){var t=zu(n),e=t%1;return t==t?e?t-e:t:0}function Wu(n){return n?Pr(Fu(n),0,D):0}function Gu(n){if("number"==typeof n)return n;if(ju(n))return O;if(Eu(n)){var t="function"==typeof n.valueOf?n.valueOf():n;n=Eu(t)?t+"":t}if("string"!=typeof n)return 0===n?n:+n;n=n.replace(jn,"");var e=$n.test(n);return e||Zn.test(n)?At(n.slice(2),e?2:8):Un.test(n)?O:+n}function Vu(n){return oa(n,ac(n))}function Uu(n){return null==n?"":Do(n)}var $u=ia(function(n,t){if(Ya(t)||mu(t))oa(t,oc(t),n);else for(var e in t)ft.call(t,e)&&xr(n,e,t[e])}),Ku=ia(function(n,t){oa(t,ac(t),n)}),Zu=ia(function(n,t,e,r){oa(t,ac(t),n,r)}),qu=ia(function(n,t,e,r){oa(t,oc(t),n,r)}),Ju=Ca(Ir);var Yu=Lo(function(n,t){n=et(n);var e=-1,r=t.length,o=r>2?t[2]:a;for(o&&Ka(t[0],t[1],o)&&(r=1);++e<r;)for(var i=t[e],u=ac(i),c=-1,l=u.length;++c<l;){var s=u[c],f=n[s];(f===a||du(f,ct[s])&&!ft.call(n,s))&&(n[s]=i[s])}return n}),Qu=Lo(function(n){return n.push(a,Ea),$t(uc,a,n)});function Xu(n,t,e){var r=null==n?a:Jr(n,t);return r===a?e:r}function nc(n,t){return null!=n&&Ga(n,t,to)}var tc=ya(function(n,t,e){null!=t&&"function"!=typeof t.toString&&(t=pt.call(t)),n[t]=e},Ec(Cc)),ec=ya(function(n,t,e){null!=t&&"function"!=typeof t.toString&&(t=pt.call(t)),ft.call(n,t)?n[t].push(e):n[t]=[e]},Oa),rc=Lo(ro);function oc(n){return mu(n)?Sr(n):lo(n)}function ac(n){return mu(n)?Sr(n,!0):so(n)}var ic=ia(function(n,t,e){vo(n,t,e)}),uc=ia(function(n,t,e,r){vo(n,t,e,r)}),cc=Ca(function(n,t){var e={};if(null==n)return e;var r=!1;t=ne(t,function(t){return t=Ko(t,n),r||(r=t.length>1),t}),oa(n,ka(n),e),r&&(e=jr(e,h|d|p,xa));for(var o=t.length;o--;)No(e,t[o]);return e});var lc=Ca(function(n,t){return null==n?{}:function(n,t){return mo(n,t,function(t,e){return nc(n,e)})}(n,t)});function sc(n,t){if(null==n)return{};var e=ne(ka(n),function(n){return[n]});return t=Oa(t),mo(n,e,function(n,e){return t(n,e[0])})}var fc=La(oc),hc=La(ac);function dc(n){return null==n?[]:be(n,oc(n))}var pc=sa(function(n,t,e){return t=t.toLowerCase(),n+(e?yc(t):t)});function yc(n){return Sc(Uu(n).toLowerCase())}function vc(n){return(n=Uu(n))&&n.replace(Jn,Re).replace(_t,"")}var gc=sa(function(n,t,e){return n+(e?"-":"")+t.toLowerCase()}),bc=sa(function(n,t,e){return n+(e?" ":"")+t.toLowerCase()}),mc=la("toLowerCase");var _c=sa(function(n,t,e){return n+(e?"_":"")+t.toLowerCase()});var wc=sa(function(n,t,e){return n+(e?" ":"")+Sc(t)});var Rc=sa(function(n,t,e){return n+(e?" ":"")+t.toUpperCase()}),Sc=la("toUpperCase");function Lc(n,t,e){return n=Uu(n),(t=e?a:t)===a?function(n){return Lt.test(n)}(n)?function(n){return n.match(Rt)||[]}(n):function(n){return n.match(Fn)||[]}(n):n.match(t)||[]}var Bc=Lo(function(n,t){try{return $t(n,a,t)}catch(n){return Su(n)?n:new Xn(n)}}),Tc=Ca(function(n,t){return Zt(t,function(t){t=si(t),kr(n,t,eu(n[t],n))}),n});function Ec(n){return function(){return n}}var xc=da(),Mc=da(!0);function Cc(n){return n}function Ac(n){return co("function"==typeof n?n:jr(n,h))}var kc=Lo(function(n,t){return function(e){return ro(e,n,t)}}),Ic=Lo(function(n,t){return function(e){return ro(n,e,t)}});function Pc(n,t,e){var r=oc(t),o=qr(t,r);null!=e||Eu(t)&&(o.length||!r.length)||(e=t,t=n,n=this,o=qr(t,oc(t)));var a=!(Eu(e)&&"chain"in e&&!e.chain),i=Lu(n);return Zt(o,function(e){var r=t[e];n[e]=r,i&&(n.prototype[e]=function(){var t=this.__chain__;if(a||t){var e=n(this.__wrapped__);return(e.__actions__=ra(this.__actions__)).push({func:r,args:arguments,thisArg:n}),e.__chain__=t,e}return r.apply(n,te([this.value()],arguments))})}),n}function jc(){}var Oc=ga(ne),Dc=ga(Jt),Hc=ga(oe);function Nc(n){return Za(n)?he(si(n)):function(n){return function(t){return Jr(t,n)}}(n)}var zc=ma(),Fc=ma(!0);function Wc(){return[]}function Gc(){return!1}var Vc=va(function(n,t){return n+t},0),Uc=Ra("ceil"),$c=va(function(n,t){return n/t},1),Kc=Ra("floor");var Zc,qc=va(function(n,t){return n*t},1),Jc=Ra("round"),Yc=va(function(n,t){return n-t},0);return dr.after=function(n,t){if("function"!=typeof t)throw new at(c);return n=Fu(n),function(){if(--n<1)return t.apply(this,arguments)}},dr.ary=nu,dr.assign=$u,dr.assignIn=Ku,dr.assignInWith=Zu,dr.assignWith=qu,dr.at=Ju,dr.before=tu,dr.bind=eu,dr.bindAll=Tc,dr.bindKey=ru,dr.castArray=function(){if(!arguments.length)return[];var n=arguments[0];return gu(n)?n:[n]},dr.chain=Ni,dr.chunk=function(n,t,e){t=(e?Ka(n,t,e):t===a)?1:Ue(Fu(t),0);var o=null==n?0:n.length;if(!o||t<1)return[];for(var i=0,u=0,c=r(He(o/t));i<o;)c[u++]=Ao(n,i,i+=t);return c},dr.compact=function(n){for(var t=-1,e=null==n?0:n.length,r=0,o=[];++t<e;){var a=n[t];a&&(o[r++]=a)}return o},dr.concat=function(){var n=arguments.length;if(!n)return[];for(var t=r(n-1),e=arguments[0],o=n;o--;)t[o-1]=arguments[o];return te(gu(e)?ra(e):[e],Vr(t,1))},dr.cond=function(n){var t=null==n?0:n.length,e=Oa();return n=t?ne(n,function(n){if("function"!=typeof n[1])throw new at(c);return[e(n[0]),n[1]]}):[],Lo(function(e){for(var r=-1;++r<t;){var o=n[r];if($t(o[0],this,e))return $t(o[1],this,e)}})},dr.conforms=function(n){return function(n){var t=oc(n);return function(e){return Or(e,n,t)}}(jr(n,h))},dr.constant=Ec,dr.countBy=Wi,dr.create=function(n,t){var e=pr(n);return null==t?e:Ar(e,t)},dr.curry=function n(t,e,r){var o=Ba(t,_,a,a,a,a,a,e=r?a:e);return o.placeholder=n.placeholder,o},dr.curryRight=function n(t,e,r){var o=Ba(t,w,a,a,a,a,a,e=r?a:e);return o.placeholder=n.placeholder,o},dr.debounce=ou,dr.defaults=Yu,dr.defaultsDeep=Qu,dr.defer=au,dr.delay=iu,dr.difference=di,dr.differenceBy=pi,dr.differenceWith=yi,dr.drop=function(n,t,e){var r=null==n?0:n.length;return r?Ao(n,(t=e||t===a?1:Fu(t))<0?0:t,r):[]},dr.dropRight=function(n,t,e){var r=null==n?0:n.length;return r?Ao(n,0,(t=r-(t=e||t===a?1:Fu(t)))<0?0:t):[]},dr.dropRightWhile=function(n,t){return n&&n.length?Fo(n,Oa(t,3),!0,!0):[]},dr.dropWhile=function(n,t){return n&&n.length?Fo(n,Oa(t,3),!0):[]},dr.fill=function(n,t,e,r){var o=null==n?0:n.length;return o?(e&&"number"!=typeof e&&Ka(n,t,e)&&(e=0,r=o),function(n,t,e,r){var o=n.length;for((e=Fu(e))<0&&(e=-e>o?0:o+e),(r=r===a||r>o?o:Fu(r))<0&&(r+=o),r=e>r?0:Wu(r);e<r;)n[e++]=t;return n}(n,t,e,r)):[]},dr.filter=function(n,t){return(gu(n)?Yt:Gr)(n,Oa(t,3))},dr.flatMap=function(n,t){return Vr(Ji(n,t),1)},dr.flatMapDeep=function(n,t){return Vr(Ji(n,t),I)},dr.flatMapDepth=function(n,t,e){return e=e===a?1:Fu(e),Vr(Ji(n,t),e)},dr.flatten=bi,dr.flattenDeep=function(n){return null!=n&&n.length?Vr(n,I):[]},dr.flattenDepth=function(n,t){return null!=n&&n.length?Vr(n,t=t===a?1:Fu(t)):[]},dr.flip=function(n){return Ba(n,T)},dr.flow=xc,dr.flowRight=Mc,dr.fromPairs=function(n){for(var t=-1,e=null==n?0:n.length,r={};++t<e;){var o=n[t];r[o[0]]=o[1]}return r},dr.functions=function(n){return null==n?[]:qr(n,oc(n))},dr.functionsIn=function(n){return null==n?[]:qr(n,ac(n))},dr.groupBy=Ki,dr.initial=function(n){return null!=n&&n.length?Ao(n,0,-1):[]},dr.intersection=_i,dr.intersectionBy=wi,dr.intersectionWith=Ri,dr.invert=tc,dr.invertBy=ec,dr.invokeMap=Zi,dr.iteratee=Ac,dr.keyBy=qi,dr.keys=oc,dr.keysIn=ac,dr.map=Ji,dr.mapKeys=function(n,t){var e={};return t=Oa(t,3),Kr(n,function(n,r,o){kr(e,t(n,r,o),n)}),e},dr.mapValues=function(n,t){var e={};return t=Oa(t,3),Kr(n,function(n,r,o){kr(e,r,t(n,r,o))}),e},dr.matches=function(n){return po(jr(n,h))},dr.matchesProperty=function(n,t){return yo(n,jr(t,h))},dr.memoize=uu,dr.merge=ic,dr.mergeWith=uc,dr.method=kc,dr.methodOf=Ic,dr.mixin=Pc,dr.negate=cu,dr.nthArg=function(n){return n=Fu(n),Lo(function(t){return go(t,n)})},dr.omit=cc,dr.omitBy=function(n,t){return sc(n,cu(Oa(t)))},dr.once=function(n){return tu(2,n)},dr.orderBy=function(n,t,e,r){return null==n?[]:(gu(t)||(t=null==t?[]:[t]),gu(e=r?a:e)||(e=null==e?[]:[e]),bo(n,t,e))},dr.over=Oc,dr.overArgs=lu,dr.overEvery=Dc,dr.overSome=Hc,dr.partial=su,dr.partialRight=fu,dr.partition=Yi,dr.pick=lc,dr.pickBy=sc,dr.property=Nc,dr.propertyOf=function(n){return function(t){return null==n?a:Jr(n,t)}},dr.pull=Li,dr.pullAll=Bi,dr.pullAllBy=function(n,t,e){return n&&n.length&&t&&t.length?_o(n,t,Oa(e,2)):n},dr.pullAllWith=function(n,t,e){return n&&n.length&&t&&t.length?_o(n,t,a,e):n},dr.pullAt=Ti,dr.range=zc,dr.rangeRight=Fc,dr.rearg=hu,dr.reject=function(n,t){return(gu(n)?Yt:Gr)(n,cu(Oa(t,3)))},dr.remove=function(n,t){var e=[];if(!n||!n.length)return e;var r=-1,o=[],a=n.length;for(t=Oa(t,3);++r<a;){var i=n[r];t(i,r,n)&&(e.push(i),o.push(r))}return wo(n,o),e},dr.rest=function(n,t){if("function"!=typeof n)throw new at(c);return Lo(n,t=t===a?t:Fu(t))},dr.reverse=Ei,dr.sampleSize=function(n,t,e){return t=(e?Ka(n,t,e):t===a)?1:Fu(t),(gu(n)?Br:To)(n,t)},dr.set=function(n,t,e){return null==n?n:Eo(n,t,e)},dr.setWith=function(n,t,e,r){return r="function"==typeof r?r:a,null==n?n:Eo(n,t,e,r)},dr.shuffle=function(n){return(gu(n)?Tr:Co)(n)},dr.slice=function(n,t,e){var r=null==n?0:n.length;return r?(e&&"number"!=typeof e&&Ka(n,t,e)?(t=0,e=r):(t=null==t?0:Fu(t),e=e===a?r:Fu(e)),Ao(n,t,e)):[]},dr.sortBy=Qi,dr.sortedUniq=function(n){return n&&n.length?jo(n):[]},dr.sortedUniqBy=function(n,t){return n&&n.length?jo(n,Oa(t,2)):[]},dr.split=function(n,t,e){return e&&"number"!=typeof e&&Ka(n,t,e)&&(t=e=a),(e=e===a?D:e>>>0)?(n=Uu(n))&&("string"==typeof t||null!=t&&!ku(t))&&!(t=Do(t))&&Be(n)?qo(ke(n),0,e):n.split(t,e):[]},dr.spread=function(n,t){if("function"!=typeof n)throw new at(c);return t=null==t?0:Ue(Fu(t),0),Lo(function(e){var r=e[t],o=qo(e,0,t);return r&&te(o,r),$t(n,this,o)})},dr.tail=function(n){var t=null==n?0:n.length;return t?Ao(n,1,t):[]},dr.take=function(n,t,e){return n&&n.length?Ao(n,0,(t=e||t===a?1:Fu(t))<0?0:t):[]},dr.takeRight=function(n,t,e){var r=null==n?0:n.length;return r?Ao(n,(t=r-(t=e||t===a?1:Fu(t)))<0?0:t,r):[]},dr.takeRightWhile=function(n,t){return n&&n.length?Fo(n,Oa(t,3),!1,!0):[]},dr.takeWhile=function(n,t){return n&&n.length?Fo(n,Oa(t,3)):[]},dr.tap=function(n,t){return t(n),n},dr.throttle=function(n,t,e){var r=!0,o=!0;if("function"!=typeof n)throw new at(c);return Eu(e)&&(r="leading"in e?!!e.leading:r,o="trailing"in e?!!e.trailing:o),ou(n,t,{leading:r,maxWait:t,trailing:o})},dr.thru=zi,dr.toArray=Nu,dr.toPairs=fc,dr.toPairsIn=hc,dr.toPath=function(n){return gu(n)?ne(n,si):ju(n)?[n]:ra(li(Uu(n)))},dr.toPlainObject=Vu,dr.transform=function(n,t,e){var r=gu(n),o=r||wu(n)||Ou(n);if(t=Oa(t,4),null==e){var a=n&&n.constructor;e=o?r?new a:[]:Eu(n)&&Lu(a)?pr(kt(n)):{}}return(o?Zt:Kr)(n,function(n,r,o){return t(e,n,r,o)}),e},dr.unary=function(n){return nu(n,1)},dr.union=xi,dr.unionBy=Mi,dr.unionWith=Ci,dr.uniq=function(n){return n&&n.length?Ho(n):[]},dr.uniqBy=function(n,t){return n&&n.length?Ho(n,Oa(t,2)):[]},dr.uniqWith=function(n,t){return t="function"==typeof t?t:a,n&&n.length?Ho(n,a,t):[]},dr.unset=function(n,t){return null==n||No(n,t)},dr.unzip=Ai,dr.unzipWith=ki,dr.update=function(n,t,e){return null==n?n:zo(n,t,$o(e))},dr.updateWith=function(n,t,e,r){return r="function"==typeof r?r:a,null==n?n:zo(n,t,$o(e),r)},dr.values=dc,dr.valuesIn=function(n){return null==n?[]:be(n,ac(n))},dr.without=Ii,dr.words=Lc,dr.wrap=function(n,t){return su($o(t),n)},dr.xor=Pi,dr.xorBy=ji,dr.xorWith=Oi,dr.zip=Di,dr.zipObject=function(n,t){return Vo(n||[],t||[],xr)},dr.zipObjectDeep=function(n,t){return Vo(n||[],t||[],Eo)},dr.zipWith=Hi,dr.entries=fc,dr.entriesIn=hc,dr.extend=Ku,dr.extendWith=Zu,Pc(dr,dr),dr.add=Vc,dr.attempt=Bc,dr.camelCase=pc,dr.capitalize=yc,dr.ceil=Uc,dr.clamp=function(n,t,e){return e===a&&(e=t,t=a),e!==a&&(e=(e=Gu(e))==e?e:0),t!==a&&(t=(t=Gu(t))==t?t:0),Pr(Gu(n),t,e)},dr.clone=function(n){return jr(n,p)},dr.cloneDeep=function(n){return jr(n,h|p)},dr.cloneDeepWith=function(n,t){return jr(n,h|p,t="function"==typeof t?t:a)},dr.cloneWith=function(n,t){return jr(n,p,t="function"==typeof t?t:a)},dr.conformsTo=function(n,t){return null==t||Or(n,t,oc(t))},dr.deburr=vc,dr.defaultTo=function(n,t){return null==n||n!=n?t:n},dr.divide=$c,dr.endsWith=function(n,t,e){n=Uu(n),t=Do(t);var r=n.length,o=e=e===a?r:Pr(Fu(e),0,r);return(e-=t.length)>=0&&n.slice(e,o)==t},dr.eq=du,dr.escape=function(n){return(n=Uu(n))&&Tn.test(n)?n.replace(Ln,Se):n},dr.escapeRegExp=function(n){return(n=Uu(n))&&Pn.test(n)?n.replace(In,"\\$&"):n},dr.every=function(n,t,e){var r=gu(n)?Jt:Fr;return e&&Ka(n,t,e)&&(t=a),r(n,Oa(t,3))},dr.find=Gi,dr.findIndex=vi,dr.findKey=function(n,t){return ie(n,Oa(t,3),Kr)},dr.findLast=Vi,dr.findLastIndex=gi,dr.findLastKey=function(n,t){return ie(n,Oa(t,3),Zr)},dr.floor=Kc,dr.forEach=Ui,dr.forEachRight=$i,dr.forIn=function(n,t){return null==n?n:Ur(n,Oa(t,3),ac)},dr.forInRight=function(n,t){return null==n?n:$r(n,Oa(t,3),ac)},dr.forOwn=function(n,t){return n&&Kr(n,Oa(t,3))},dr.forOwnRight=function(n,t){return n&&Zr(n,Oa(t,3))},dr.get=Xu,dr.gt=pu,dr.gte=yu,dr.has=function(n,t){return null!=n&&Ga(n,t,no)},dr.hasIn=nc,dr.head=mi,dr.identity=Cc,dr.includes=function(n,t,e,r){n=mu(n)?n:dc(n),e=e&&!r?Fu(e):0;var o=n.length;return e<0&&(e=Ue(o+e,0)),Pu(n)?e<=o&&n.indexOf(t,e)>-1:!!o&&ce(n,t,e)>-1},dr.indexOf=function(n,t,e){var r=null==n?0:n.length;if(!r)return-1;var o=null==e?0:Fu(e);return o<0&&(o=Ue(r+o,0)),ce(n,t,o)},dr.inRange=function(n,t,e){return t=zu(t),e===a?(e=t,t=0):e=zu(e),function(n,t,e){return n>=$e(t,e)&&n<Ue(t,e)}(n=Gu(n),t,e)},dr.invoke=rc,dr.isArguments=vu,dr.isArray=gu,dr.isArrayBuffer=bu,dr.isArrayLike=mu,dr.isArrayLikeObject=_u,dr.isBoolean=function(n){return!0===n||!1===n||xu(n)&&Qr(n)==V},dr.isBuffer=wu,dr.isDate=Ru,dr.isElement=function(n){return xu(n)&&1===n.nodeType&&!Au(n)},dr.isEmpty=function(n){if(null==n)return!0;if(mu(n)&&(gu(n)||"string"==typeof n||"function"==typeof n.splice||wu(n)||Ou(n)||vu(n)))return!n.length;var t=Wa(n);if(t==J||t==en)return!n.size;if(Ya(n))return!lo(n).length;for(var e in n)if(ft.call(n,e))return!1;return!0},dr.isEqual=function(n,t){return ao(n,t)},dr.isEqualWith=function(n,t,e){var r=(e="function"==typeof e?e:a)?e(n,t):a;return r===a?ao(n,t,a,e):!!r},dr.isError=Su,dr.isFinite=function(n){return"number"==typeof n&&We(n)},dr.isFunction=Lu,dr.isInteger=Bu,dr.isLength=Tu,dr.isMap=Mu,dr.isMatch=function(n,t){return n===t||io(n,t,Ha(t))},dr.isMatchWith=function(n,t,e){return e="function"==typeof e?e:a,io(n,t,Ha(t),e)},dr.isNaN=function(n){return Cu(n)&&n!=+n},dr.isNative=function(n){if(Ja(n))throw new Xn(u);return uo(n)},dr.isNil=function(n){return null==n},dr.isNull=function(n){return null===n},dr.isNumber=Cu,dr.isObject=Eu,dr.isObjectLike=xu,dr.isPlainObject=Au,dr.isRegExp=ku,dr.isSafeInteger=function(n){return Bu(n)&&n>=-P&&n<=P},dr.isSet=Iu,dr.isString=Pu,dr.isSymbol=ju,dr.isTypedArray=Ou,dr.isUndefined=function(n){return n===a},dr.isWeakMap=function(n){return xu(n)&&Wa(n)==un},dr.isWeakSet=function(n){return xu(n)&&Qr(n)==cn},dr.join=function(n,t){return null==n?"":Ge.call(n,t)},dr.kebabCase=gc,dr.last=Si,dr.lastIndexOf=function(n,t,e){var r=null==n?0:n.length;if(!r)return-1;var o=r;return e!==a&&(o=(o=Fu(e))<0?Ue(r+o,0):$e(o,r-1)),t==t?function(n,t,e){for(var r=e+1;r--;)if(n[r]===t)return r;return r}(n,t,o):ue(n,se,o,!0)},dr.lowerCase=bc,dr.lowerFirst=mc,dr.lt=Du,dr.lte=Hu,dr.max=function(n){return n&&n.length?Wr(n,Cc,Xr):a},dr.maxBy=function(n,t){return n&&n.length?Wr(n,Oa(t,2),Xr):a},dr.mean=function(n){return fe(n,Cc)},dr.meanBy=function(n,t){return fe(n,Oa(t,2))},dr.min=function(n){return n&&n.length?Wr(n,Cc,fo):a},dr.minBy=function(n,t){return n&&n.length?Wr(n,Oa(t,2),fo):a},dr.stubArray=Wc,dr.stubFalse=Gc,dr.stubObject=function(){return{}},dr.stubString=function(){return""},dr.stubTrue=function(){return!0},dr.multiply=qc,dr.nth=function(n,t){return n&&n.length?go(n,Fu(t)):a},dr.noConflict=function(){return Pt._===this&&(Pt._=vt),this},dr.noop=jc,dr.now=Xi,dr.pad=function(n,t,e){n=Uu(n);var r=(t=Fu(t))?Ae(n):0;if(!t||r>=t)return n;var o=(t-r)/2;return ba(Ne(o),e)+n+ba(He(o),e)},dr.padEnd=function(n,t,e){n=Uu(n);var r=(t=Fu(t))?Ae(n):0;return t&&r<t?n+ba(t-r,e):n},dr.padStart=function(n,t,e){n=Uu(n);var r=(t=Fu(t))?Ae(n):0;return t&&r<t?ba(t-r,e)+n:n},dr.parseInt=function(n,t,e){return e||null==t?t=0:t&&(t=+t),Ze(Uu(n).replace(On,""),t||0)},dr.random=function(n,t,e){if(e&&"boolean"!=typeof e&&Ka(n,t,e)&&(t=e=a),e===a&&("boolean"==typeof t?(e=t,t=a):"boolean"==typeof n&&(e=n,n=a)),n===a&&t===a?(n=0,t=1):(n=zu(n),t===a?(t=n,n=0):t=zu(t)),n>t){var r=n;n=t,t=r}if(e||n%1||t%1){var o=qe();return $e(n+o*(t-n+Ct("1e-"+((o+"").length-1))),t)}return Ro(n,t)},dr.reduce=function(n,t,e){var r=gu(n)?ee:pe,o=arguments.length<3;return r(n,Oa(t,4),e,o,Nr)},dr.reduceRight=function(n,t,e){var r=gu(n)?re:pe,o=arguments.length<3;return r(n,Oa(t,4),e,o,zr)},dr.repeat=function(n,t,e){return t=(e?Ka(n,t,e):t===a)?1:Fu(t),So(Uu(n),t)},dr.replace=function(){var n=arguments,t=Uu(n[0]);return n.length<3?t:t.replace(n[1],n[2])},dr.result=function(n,t,e){var r=-1,o=(t=Ko(t,n)).length;for(o||(o=1,n=a);++r<o;){var i=null==n?a:n[si(t[r])];i===a&&(r=o,i=e),n=Lu(i)?i.call(n):i}return n},dr.round=Jc,dr.runInContext=n,dr.sample=function(n){return(gu(n)?Lr:Bo)(n)},dr.size=function(n){if(null==n)return 0;if(mu(n))return Pu(n)?Ae(n):n.length;var t=Wa(n);return t==J||t==en?n.size:lo(n).length},dr.snakeCase=_c,dr.some=function(n,t,e){var r=gu(n)?oe:ko;return e&&Ka(n,t,e)&&(t=a),r(n,Oa(t,3))},dr.sortedIndex=function(n,t){return Io(n,t)},dr.sortedIndexBy=function(n,t,e){return Po(n,t,Oa(e,2))},dr.sortedIndexOf=function(n,t){var e=null==n?0:n.length;if(e){var r=Io(n,t);if(r<e&&du(n[r],t))return r}return-1},dr.sortedLastIndex=function(n,t){return Io(n,t,!0)},dr.sortedLastIndexBy=function(n,t,e){return Po(n,t,Oa(e,2),!0)},dr.sortedLastIndexOf=function(n,t){if(null!=n&&n.length){var e=Io(n,t,!0)-1;if(du(n[e],t))return e}return-1},dr.startCase=wc,dr.startsWith=function(n,t,e){return n=Uu(n),e=null==e?0:Pr(Fu(e),0,n.length),t=Do(t),n.slice(e,e+t.length)==t},dr.subtract=Yc,dr.sum=function(n){return n&&n.length?ye(n,Cc):0},dr.sumBy=function(n,t){return n&&n.length?ye(n,Oa(t,2)):0},dr.template=function(n,t,e){var r=dr.templateSettings;e&&Ka(n,t,e)&&(t=a),n=Uu(n),t=Zu({},t,r,Ta);var o,i,u=Zu({},t.imports,r.imports,Ta),c=oc(u),l=be(u,c),s=0,f=t.interpolate||Yn,h="__p += '",d=rt((t.escape||Yn).source+"|"+f.source+"|"+(f===Mn?Gn:Yn).source+"|"+(t.evaluate||Yn).source+"|$","g"),p="//# sourceURL="+("sourceURL"in t?t.sourceURL:"lodash.templateSources["+ ++Tt+"]")+"\n";n.replace(d,function(t,e,r,a,u,c){return r||(r=a),h+=n.slice(s,c).replace(Qn,Le),e&&(o=!0,h+="' +\n__e("+e+") +\n'"),u&&(i=!0,h+="';\n"+u+";\n__p += '"),r&&(h+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),s=c+t.length,t}),h+="';\n";var y=t.variable;y||(h="with (obj) {\n"+h+"\n}\n"),h=(i?h.replace(_n,""):h).replace(wn,"$1").replace(Rn,"$1;"),h="function("+(y||"obj")+") {\n"+(y?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(o?", __e = _.escape":"")+(i?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+h+"return __p\n}";var v=Bc(function(){return nt(c,p+"return "+h).apply(a,l)});if(v.source=h,Su(v))throw v;return v},dr.times=function(n,t){if((n=Fu(n))<1||n>P)return[];var e=D,r=$e(n,D);t=Oa(t),n-=D;for(var o=ve(r,t);++e<n;)t(e);return o},dr.toFinite=zu,dr.toInteger=Fu,dr.toLength=Wu,dr.toLower=function(n){return Uu(n).toLowerCase()},dr.toNumber=Gu,dr.toSafeInteger=function(n){return n?Pr(Fu(n),-P,P):0===n?n:0},dr.toString=Uu,dr.toUpper=function(n){return Uu(n).toUpperCase()},dr.trim=function(n,t,e){if((n=Uu(n))&&(e||t===a))return n.replace(jn,"");if(!n||!(t=Do(t)))return n;var r=ke(n),o=ke(t);return qo(r,_e(r,o),we(r,o)+1).join("")},dr.trimEnd=function(n,t,e){if((n=Uu(n))&&(e||t===a))return n.replace(Dn,"");if(!n||!(t=Do(t)))return n;var r=ke(n);return qo(r,0,we(r,ke(t))+1).join("")},dr.trimStart=function(n,t,e){if((n=Uu(n))&&(e||t===a))return n.replace(On,"");if(!n||!(t=Do(t)))return n;var r=ke(n);return qo(r,_e(r,ke(t))).join("")},dr.truncate=function(n,t){var e=E,r=x;if(Eu(t)){var o="separator"in t?t.separator:o;e="length"in t?Fu(t.length):e,r="omission"in t?Do(t.omission):r}var i=(n=Uu(n)).length;if(Be(n)){var u=ke(n);i=u.length}if(e>=i)return n;var c=e-Ae(r);if(c<1)return r;var l=u?qo(u,0,c).join(""):n.slice(0,c);if(o===a)return l+r;if(u&&(c+=l.length-c),ku(o)){if(n.slice(c).search(o)){var s,f=l;for(o.global||(o=rt(o.source,Uu(Vn.exec(o))+"g")),o.lastIndex=0;s=o.exec(f);)var h=s.index;l=l.slice(0,h===a?c:h)}}else if(n.indexOf(Do(o),c)!=c){var d=l.lastIndexOf(o);d>-1&&(l=l.slice(0,d))}return l+r},dr.unescape=function(n){return(n=Uu(n))&&Bn.test(n)?n.replace(Sn,Ie):n},dr.uniqueId=function(n){var t=++ht;return Uu(n)+t},dr.upperCase=Rc,dr.upperFirst=Sc,dr.each=Ui,dr.eachRight=$i,dr.first=mi,Pc(dr,(Zc={},Kr(dr,function(n,t){ft.call(dr.prototype,t)||(Zc[t]=n)}),Zc),{chain:!1}),dr.VERSION="4.17.11",Zt(["bind","bindKey","curry","curryRight","partial","partialRight"],function(n){dr[n].placeholder=dr}),Zt(["drop","take"],function(n,t){gr.prototype[n]=function(e){e=e===a?1:Ue(Fu(e),0);var r=this.__filtered__&&!t?new gr(this):this.clone();return r.__filtered__?r.__takeCount__=$e(e,r.__takeCount__):r.__views__.push({size:$e(e,D),type:n+(r.__dir__<0?"Right":"")}),r},gr.prototype[n+"Right"]=function(t){return this.reverse()[n](t).reverse()}}),Zt(["filter","map","takeWhile"],function(n,t){var e=t+1,r=e==A||3==e;gr.prototype[n]=function(n){var t=this.clone();return t.__iteratees__.push({iteratee:Oa(n,3),type:e}),t.__filtered__=t.__filtered__||r,t}}),Zt(["head","last"],function(n,t){var e="take"+(t?"Right":"");gr.prototype[n]=function(){return this[e](1).value()[0]}}),Zt(["initial","tail"],function(n,t){var e="drop"+(t?"":"Right");gr.prototype[n]=function(){return this.__filtered__?new gr(this):this[e](1)}}),gr.prototype.compact=function(){return this.filter(Cc)},gr.prototype.find=function(n){return this.filter(n).head()},gr.prototype.findLast=function(n){return this.reverse().find(n)},gr.prototype.invokeMap=Lo(function(n,t){return"function"==typeof n?new gr(this):this.map(function(e){return ro(e,n,t)})}),gr.prototype.reject=function(n){return this.filter(cu(Oa(n)))},gr.prototype.slice=function(n,t){n=Fu(n);var e=this;return e.__filtered__&&(n>0||t<0)?new gr(e):(n<0?e=e.takeRight(-n):n&&(e=e.drop(n)),t!==a&&(e=(t=Fu(t))<0?e.dropRight(-t):e.take(t-n)),e)},gr.prototype.takeRightWhile=function(n){return this.reverse().takeWhile(n).reverse()},gr.prototype.toArray=function(){return this.take(D)},Kr(gr.prototype,function(n,t){var e=/^(?:filter|find|map|reject)|While$/.test(t),r=/^(?:head|last)$/.test(t),o=dr[r?"take"+("last"==t?"Right":""):t],i=r||/^find/.test(t);o&&(dr.prototype[t]=function(){var t=this.__wrapped__,u=r?[1]:arguments,c=t instanceof gr,l=u[0],s=c||gu(t),f=function(n){var t=o.apply(dr,te([n],u));return r&&h?t[0]:t};s&&e&&"function"==typeof l&&1!=l.length&&(c=s=!1);var h=this.__chain__,d=!!this.__actions__.length,p=i&&!h,y=c&&!d;if(!i&&s){t=y?t:new gr(this);var v=n.apply(t,u);return v.__actions__.push({func:zi,args:[f],thisArg:a}),new vr(v,h)}return p&&y?n.apply(this,u):(v=this.thru(f),p?r?v.value()[0]:v.value():v)})}),Zt(["pop","push","shift","sort","splice","unshift"],function(n){var t=it[n],e=/^(?:push|sort|unshift)$/.test(n)?"tap":"thru",r=/^(?:pop|shift)$/.test(n);dr.prototype[n]=function(){var n=arguments;if(r&&!this.__chain__){var o=this.value();return t.apply(gu(o)?o:[],n)}return this[e](function(e){return t.apply(gu(e)?e:[],n)})}}),Kr(gr.prototype,function(n,t){var e=dr[t];if(e){var r=e.name+"";(or[r]||(or[r]=[])).push({name:t,func:e})}}),or[pa(a,b).name]=[{name:"wrapper",func:a}],gr.prototype.clone=function(){var n=new gr(this.__wrapped__);return n.__actions__=ra(this.__actions__),n.__dir__=this.__dir__,n.__filtered__=this.__filtered__,n.__iteratees__=ra(this.__iteratees__),n.__takeCount__=this.__takeCount__,n.__views__=ra(this.__views__),n},gr.prototype.reverse=function(){if(this.__filtered__){var n=new gr(this);n.__dir__=-1,n.__filtered__=!0}else(n=this.clone()).__dir__*=-1;return n},gr.prototype.value=function(){var n=this.__wrapped__.value(),t=this.__dir__,e=gu(n),r=t<0,o=e?n.length:0,a=function(n,t,e){for(var r=-1,o=e.length;++r<o;){var a=e[r],i=a.size;switch(a.type){case"drop":n+=i;break;case"dropRight":t-=i;break;case"take":t=$e(t,n+i);break;case"takeRight":n=Ue(n,t-i)}}return{start:n,end:t}}(0,o,this.__views__),i=a.start,u=a.end,c=u-i,l=r?u:i-1,s=this.__iteratees__,f=s.length,h=0,d=$e(c,this.__takeCount__);if(!e||!r&&o==c&&d==c)return Wo(n,this.__actions__);var p=[];n:for(;c--&&h<d;){for(var y=-1,v=n[l+=t];++y<f;){var g=s[y],b=g.iteratee,m=g.type,_=b(v);if(m==k)v=_;else if(!_){if(m==A)continue n;break n}}p[h++]=v}return p},dr.prototype.at=Fi,dr.prototype.chain=function(){return Ni(this)},dr.prototype.commit=function(){return new vr(this.value(),this.__chain__)},dr.prototype.next=function(){this.__values__===a&&(this.__values__=Nu(this.value()));var n=this.__index__>=this.__values__.length;return{done:n,value:n?a:this.__values__[this.__index__++]}},dr.prototype.plant=function(n){for(var t,e=this;e instanceof yr;){var r=hi(e);r.__index__=0,r.__values__=a,t?o.__wrapped__=r:t=r;var o=r;e=e.__wrapped__}return o.__wrapped__=n,t},dr.prototype.reverse=function(){var n=this.__wrapped__;if(n instanceof gr){var t=n;return this.__actions__.length&&(t=new gr(this)),(t=t.reverse()).__actions__.push({func:zi,args:[Ei],thisArg:a}),new vr(t,this.__chain__)}return this.thru(Ei)},dr.prototype.toJSON=dr.prototype.valueOf=dr.prototype.value=function(){return Wo(this.__wrapped__,this.__actions__)},dr.prototype.first=dr.prototype.head,Nt&&(dr.prototype[Nt]=function(){return this}),dr}();Pt._=Pe,(o=function(){return Pe}.call(t,e,t,r))===a||(r.exports=o)}).call(this)}).call(this,e(5),e(6)(n))},function(n,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=e(0),a=e(1),i=function(){function n(){this.blood=15,this.revealed=!1,this.trail=[],this.encounterHandSize=5,this.encounterHand=[],this.seaBloodPaid=!1,this.powers=[{name:r.darkCall,nightOnly:!0,cost:2},{name:r.doubleBack,nightOnly:!1,cost:0},{name:r.feed,nightOnly:!0,cost:-1},{name:r.hide,nightOnly:!1,cost:0},{name:r.wolfForm,nightOnly:!0,cost:1},{name:r.wolfFormAndDoubleBack,nightOnly:!0,cost:1},{name:r.wolfFormAndHide,nightOnly:!0,cost:1}],this.debugMode=!0}return n.prototype.setLocation=function(n){return this.currentLocation=n,this.debug("Dracula moved to "+this.currentLocation.name),this.revealed?"Dracula moved to "+this.currentLocation.name:"Dracula moved to a hidden location"},n.prototype.chooseStartLocation=function(n){for(var t=n.map.locations.filter(function(n){return n.type==o.LocationType.smallCity||n.type==o.LocationType.largeCity}),e=t.map(function(t){return Math.min(n.map.distanceBetweenLocations(t,n.godalming.currentLocation),n.map.distanceBetweenLocations(t,n.seward.currentLocation),n.map.distanceBetweenLocations(t,n.vanHelsing.currentLocation),n.map.distanceBetweenLocations(t,n.mina.currentLocation))}),r=e.reduce(function(n,t){return t>n?t:n},0),a=[],i=0;i<e.length;i++)e[i]==r&&a.push(i);return t[a[Math.floor(Math.random()*a.length)]]},n.prototype.chooseNextMove=function(n){var t=this;this.nextMove=null;var e=[],i=a.union(this.currentLocation.roadConnections,this.currentLocation.seaConnections).map(function(t){return n.map.getLocationByName(t)}),u=this.trail.filter(function(n){return n.location}).map(function(n){return n.location});1!=this.blood||this.currentLocation.type===o.LocationType.sea&&(this.currentLocation.type!=o.LocationType.sea||this.seaBloodPaid)||u.concat(i.filter(function(n){return n.type==o.LocationType.sea})),a.without.apply(a,[i].concat(u,[n.map.locations.find(function(n){return n.type==o.LocationType.hospital})])).map(function(n){return e.push({location:n,value:1})});var c=this.powers.slice(0,5).filter(function(e){return(0==e.nightOnly||n.timePhase>2)&&e.cost<t.blood&&t.currentLocation.type!==o.LocationType.sea}),l=[];this.trail.forEach(function(n){n.power&&(l.push(n.power),n.power.name==r.wolfFormAndDoubleBack&&(l.push(t.powers.find(function(n){return n.name==r.wolfForm})),l.push(t.powers.find(function(n){return n.name==r.doubleBack}))),n.power.name==r.wolfFormAndHide&&(l.push(t.powers.find(function(n){return n.name==r.wolfForm})),l.push(t.powers.find(function(n){return n.name==r.hide}))))});var s=a.without.apply(a,[c].concat(l));if(s.find(function(n){return n.name==r.wolfForm})&&(s.find(function(n){return n.name==r.doubleBack})&&s.push(this.powers.find(function(n){return n.name==r.wolfFormAndDoubleBack})),s.find(function(n){return n.name==r.hide})&&s.push(this.powers.find(function(n){return n.name==r.wolfFormAndHide}))),s.forEach(function(o){var i=[],u=[];switch(o.name){case r.darkCall:e.push({power:o,value:1});break;case r.doubleBack:t.trail.concat(n.catacombs).forEach(function(r){1==n.map.distanceBetweenLocations(t.currentLocation,r.location,["road","sea"])&&e.push({location:r.location,power:o,value:1})});break;case r.feed:case r.hide:e.push({power:o,value:1});break;case r.wolfForm:(i=t.currentLocation.roadConnections.map(function(t){return n.map.getLocationByName(t)})).forEach(function(t){return u=u.concat(t.roadConnections.map(function(t){return n.map.getLocationByName(t)}))}),i=a.union(i,u),i=(i=a.uniq(i)).filter(function(e){return!t.trail.find(function(n){return n.location==e})&&!n.catacombs.find(function(n){return n.location==e})}),(i=a.without(i,t.currentLocation)).forEach(function(n){return e.push({power:o,location:n,value:1})});break;case r.wolfFormAndDoubleBack:(i=t.currentLocation.roadConnections.map(function(t){return n.map.getLocationByName(t)})).forEach(function(t){return u=u.concat(t.roadConnections.map(function(t){return n.map.getLocationByName(t)}))}),i=a.union(i,u),(i=(i=a.uniq(i)).filter(function(e){return t.trail.find(function(n){return n.location==e})||n.catacombs.find(function(n){return n.location==e})})).forEach(function(n){return e.push({power:o,location:n,value:1})});break;case r.wolfFormAndHide:e.push({power:o,value:1})}}),this.debug("Possible moves are to: "+e.filter(function(n){return!n.power}).map(function(n){return n.location.name})),this.debug("Possible powers are: "+e.filter(function(n){return n.power&&!n.location}).map(function(n){return n.power.name})),this.debug("Possible power moves are: "+e.filter(function(n){return n.power&&n.location}).map(function(n){return n.power.name+" to "+n.location.name})),e.length>0){for(var f=e.reduce(function(n,t){return n+t.value},0),h=Math.floor(Math.random()*f),d=0,p=0;p<h;)p+=e[d].value,d++;this.nextMove=e[d],this.debug((this.nextMove.power?this.nextMove.power.name:"Move")+(this.nextMove.location?" to "+this.nextMove.location.name:""))}else this.debug("No possible moves");return"Dracula has decided what to do this turn"},n.prototype.chooseEncounter=function(){var n=Math.floor(Math.random()*this.encounterHand.length);return this.debug("Choosing "+this.encounterHand[n].name),this.encounterHand.splice(n,1)[0]},n.prototype.die=function(){return"Dracula was dealt a mortal blow\n"+this.setBlood(5*Math.floor((this.blood-1)/5))},n.prototype.setBlood=function(n){return this.blood=Math.max(0,Math.min(n,15)),"Dracula is now on "+this.blood+" blood"},n.prototype.pushToTrail=function(n){return this.trail.unshift(n),"Dracula added a card to the trail"},n.prototype.executeDarkCall=function(n){return"Dracula has chosen his encounters"},n.prototype.drawUpEncounters=function(n){for(var t=0;this.encounterHand.length<this.encounterHandSize;)this.encounterHand.push(n.pop()),this.debug("Dracula drew encounter "+this.encounterHand[this.encounterHand.length-1].name),t++;return t>0?"Dracula drew "+t+" encounters":""},n.prototype.decideWhichEncounterToKeep=function(n,t){return n&&Math.floor(Math.random())<.5?n:t},n.prototype.decideFateOfDroppedOffCard=function(n,t){if(n.location){if(Math.random()<.2&&t.catacombs.length<3&&n.location.type!==o.LocationType.sea)return t.catacombEncounters.push(this.chooseEncounter()),this.debug("Card added to catacombs: "+n.location.name+" with "+(n.encounter?n.encounter.name:"__")+" and "+t.catacombEncounters[t.catacombEncounters.length-1].name),t.catacombs.push(n),"Dracula moved the card to the catacombs with an additional encounter on it";this.debug("Card returned to deck: "+n.location.name),this.droppedOffEncounter=n.encounter,this.droppedOffEncounter&&this.debug("Encounter "+this.droppedOffEncounter.name+" to be dealt with later")}return"Dracula returned the dropped off card to the Location deck"},n.prototype.evaluateCatacombs=function(n){for(var t="",e=n.catacombs.length-1;e>=0;e--)Math.random()<.2&&(this.debug("Discarding catacomb "+n.catacombs[e].location.name+" with "+n.catacombEncounters[e].name),t+=t?" and position "+(e+1):"Dracula discarded catacomb card from position "+(e+1),n.encounterPool.push(n.catacombEncounters.splice(e,1)[0]),n.catacombs[e].encounter&&(n.encounterPool.push(n.catacombs[e].encounter),this.debug(" and "+n.catacombs[e].encounter.name)),n.catacombs.splice(e,1),n.shuffleEncounters());return t},n.prototype.clearTrail=function(n,t){for(var e=0,r=0;this.trail.length>t;){var o=this.trail.pop();e++,o.location&&this.debug("Returning "+o.location.name+" to the Location deck"),o.power&&(e++,this.debug("Returning "+o.power.name+" to the Location deck")),o.encounter&&(this.debug("Returning "+o.encounter.name+" to the encounter pool"),r++,n.encounterPool.push(o.encounter),n.shuffleEncounters())}return"Returned "+e+" cards and "+r+" encounters"},n.prototype.debug=function(n){this.debugMode&&console.log(n)},n}();t.Dracula=i,function(n){n.darkCall="Dark Call",n.doubleBack="Double Back",n.feed="Feed",n.hide="Hide",n.wolfForm="Wolf Form",n.wolfFormAndDoubleBack="Wolf Form and Double Back",n.wolfFormAndHide="Wolf Form and Hide"}(r=t.PowerName||(t.PowerName={}))},function(n,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=e(4),o=e(0),a=e(2),i=new r.Game,u=document.getElementById("logBox"),c=document.getElementById("draculaBlood"),l=document.getElementById("draculaLocation"),s=document.getElementById("encounterCount"),f=document.getElementById("godalmingHealth"),h=document.getElementById("sewardHealth"),d=document.getElementById("vanHelsingHealth"),p=document.getElementById("minaHealth"),y=document.getElementById("godalmingLocation"),v=document.getElementById("sewardLocation"),g=document.getElementById("vanHelsingLocation"),b=document.getElementById("minaLocation"),m=[document.getElementById("trail1"),document.getElementById("trail2"),document.getElementById("trail3"),document.getElementById("trail4"),document.getElementById("trail5"),document.getElementById("trail6")],_=[document.getElementById("encounter1"),document.getElementById("encounter2"),document.getElementById("encounter3"),document.getElementById("encounter4"),document.getElementById("encounter5"),document.getElementById("encounter6")],w=[document.getElementById("power1"),document.getElementById("power2"),document.getElementById("power3"),document.getElementById("power4"),document.getElementById("power5"),document.getElementById("power6")],R=document.getElementById("timePhase"),S=document.getElementById("vampireTrack"),L=document.getElementById("resolveTrack"),B=document.getElementById("catacombs"),T=document.getElementById("startButton"),E=document.getElementById("godalmingSearch"),x=document.getElementById("sewardSearch"),M=document.getElementById("vanHelsingSearch"),C=document.getElementById("minaSearch"),A=document.getElementById("timeKeepingButton"),k=document.getElementById("draculaMovementButton"),I=document.getElementById("draculaActionButton"),P=["Dawn","Noon","Dusk","Twilight","Midnight","Small Hours"];function j(){u.value=i.logText,u.scrollTop=u.scrollHeight,c.value=i.dracula.blood.toString(),l.value=i.dracula.revealed?i.dracula.currentLocation.name:"Hidden",f.value=i.godalming.health.toString(),h.value=i.seward.health.toString(),d.value=i.vanHelsing.health.toString(),p.value=i.mina.health.toString(),s.value=i.dracula.encounterHand.length.toString(),R.value=P[i.timePhase]||"",S.value=i.vampireTrack.toString(),L.value=i.resolveTrack.toString(),B.value=i.catacombs.length.toString();for(var n=0;n<6;n++)i.dracula.trail[n]?(i.dracula.trail[n].location?O(n,i.dracula.trail[n]):H(m[n]),i.dracula.trail[n].encounter?D(n,i.dracula.trail[n]):H(_[n]),i.dracula.trail[n].power?i.dracula.trail[n].power.name.match(/and Hide/)?(m[n].value="Land",w[n].value=i.dracula.trail[n].power.name.slice(0,i.dracula.trail[n].power.name.indexOf(" and Hide"))):i.dracula.trail[n].power.name==a.PowerName.hide?(m[n].value="Land",H(w[n])):w[n].value=i.dracula.trail[n].power.name:H(w[n])):(H(m[n]),H(_[n]),H(w[n]))}function O(n,t){t.revealed?function(n,t){m[n].value=t.name}(n,t.location):function(n,t){m[n].value=t.type==o.LocationType.sea?"Sea":"Land"}(n,t.location)}function D(n,t){t.encounter.revealed?function(n,t){_[n].value=t.name}(n,t.encounter):function(n){_[n].value="Encounter"}(n)}function H(n){n.value=""}c.addEventListener("change",function(){i.setDraculaBlood(parseInt(c.value)),j()}),Array.from(document.getElementsByClassName("locationSelector")).forEach(function(n){i.map.locations.forEach(function(t){n.options.add(new Option(t.name))})}),f.addEventListener("change",function(){i.setHunterHealth(i.godalming,parseInt(f.value)),j()}),h.addEventListener("change",function(){i.setHunterHealth(i.seward,parseInt(h.value)),j()}),d.addEventListener("change",function(){i.setHunterHealth(i.vanHelsing,parseInt(d.value)),j()}),p.addEventListener("change",function(){i.setHunterHealth(i.mina,parseInt(p.value)),j()}),y.addEventListener("change",function(){i.setHunterLocation(i.godalming,i.map.getLocationByName(y.value)),j()}),v.addEventListener("change",function(){i.setHunterLocation(i.seward,i.map.getLocationByName(v.value)),j()}),g.addEventListener("change",function(){i.setHunterLocation(i.vanHelsing,i.map.getLocationByName(g.value)),j()}),b.addEventListener("change",function(){i.setHunterLocation(i.mina,i.map.getLocationByName(b.value)),j()}),T.addEventListener("click",function(){T.parentNode.removeChild(T),i.startGame(),A.style.visibility=null,j()}),E.addEventListener("click",function(){i.searchWithHunter(i.godalming),j()}),x.addEventListener("click",function(){i.searchWithHunter(i.seward),j()}),M.addEventListener("click",function(){i.searchWithHunter(i.vanHelsing),j()}),C.addEventListener("click",function(){i.searchWithHunter(i.mina),j()}),A.addEventListener("click",function(){i.performTimeKeepingPhase(),j(),j(),i.performDraculaMovementPhase(),j(),i.performDraculaActionPhase(),j()}),k.addEventListener("click",function(){i.performDraculaMovementPhase(),k.style.visibility="hidden",I.style.visibility=null,j()}),I.addEventListener("click",function(){i.performDraculaActionPhase(),I.style.visibility="hidden",A.style.visibility=null,j()}),i.initialiseGameState(),i.log("Hunters set starting locations then press Start button"),j()},function(n,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=e(0),o=e(2),a=e(7),i=e(8),u=function(){function n(){this.map=new r.GameMap,this.encounterPool=i.initialiseEncounterPool(),this.catacombs=[],this.catacombEncounters=[],this.dracula=new o.Dracula,this.godalming=new a.Godalming,this.seward=new a.Seward,this.vanHelsing=new a.VanHelsing,this.mina=new a.Mina,this.dracula.setLocation(this.map.locations[0]),this.godalming.setLocation(this.map.locations[0]),this.seward.setLocation(this.map.locations[0]),this.vanHelsing.setLocation(this.map.locations[0]),this.mina.setLocation(this.map.locations[0])}return n.prototype.log=function(n){this.logText+=n?"\n"+n:""},n.prototype.initialiseGameState=function(){this.logText="INITIALISING GAME STATE",this.log(this.map.verifyMapData()),this.log(this.shuffleEncounters()),this.log(this.dracula.drawUpEncounters(this.encounterPool)),this.timePhase=-1,this.vampireTrack=0,this.resolveTrack=0,this.log("GAME STATE INITIALISED")},n.prototype.startGame=function(){var n=this.dracula.chooseStartLocation(this);this.log(this.dracula.setLocation(n)),this.log(this.dracula.pushToTrail({location:n,revealed:!1})),this.log("It is now Dracula's turn")},n.prototype.searchWithHunter=function(n){var t=this,e=!1;this.dracula.trail.forEach(function(r){n.currentLocation==r.location&&(e=!0,r.revealed=!0,t.log(n.name+" has found Dracula's trail at "+n.currentLocation.name),r.encounter&&(r.encounter.revealed=!0,t.log(n.name+" has encountered "+r.encounter.name+" at "+n.currentLocation.name)))});for(var r=0;r<this.catacombs.length;r++){var o=this.catacombs[r];n.currentLocation==o.location&&(e=!0,o.revealed=!0,this.log(n.name+" has found Dracula's catacomb at "+n.currentLocation.name),o.encounter&&(o.encounter.revealed=!0,this.log(n.name+" has encountered "+o.encounter.name+" at "+n.currentLocation.name),this.encounterPool.push(o.encounter)),this.catacombEncounters[r].revealed=!0,this.log(n.name+" has encountered "+this.catacombEncounters[r].name+" at "+n.currentLocation.name),this.encounterPool.push(this.catacombEncounters[r])),this.catacombs.splice(r,1),this.catacombEncounters.splice(r,1),this.log(this.shuffleEncounters());break}n.currentLocation==this.dracula.currentLocation&&(e=!0,this.dracula.revealed=!0,this.log(n.name+" has found Dracula at "+n.currentLocation.name)),e||this.log(n.name+" found nothing at "+n.currentLocation.name)},n.prototype.setHunterLocation=function(n,t){this.log(n.setLocation(t))},n.prototype.setHunterHealth=function(n,t){this.log(n.setHealth(t))},n.prototype.setDraculaBlood=function(n){this.log(this.dracula.setBlood(n))},n.prototype.performTimeKeepingPhase=function(){this.log("Performing Timekeeping phase"),this.log(this.dracula.chooseNextMove(this)),this.log(this.dracula.evaluateCatacombs(this)),this.dracula.currentLocation.type!==r.LocationType.sea&&(this.log("Time advancing..."),this.timePhase+=1,6==this.timePhase&&(this.log("A new day dawns"),this.vampireTrack+=1,this.resolveTrack+=1,this.timePhase=0))},n.prototype.performDraculaMovementPhase=function(){var n,t,e,a;if(this.dracula.nextMove||(this.log("Dracula has no valid moves"),this.log(this.dracula.die()),this.log(this.dracula.clearTrail(this,1)),this.dracula.revealed=!0,this.dracula.trail[0].revealed=!0,this.log(this.dracula.chooseNextMove(this))),this.dracula.nextMove.power){switch(this.dracula.nextMove.power.name){case o.PowerName.darkCall:this.log("Dracula played power Dark Call"),this.log(this.dracula.executeDarkCall(this)),this.log(this.shuffleEncounters());break;case o.PowerName.doubleBack:case o.PowerName.wolfFormAndDoubleBack:this.log("Dracula played power "+this.dracula.nextMove.power.name);for(var i=0;i<this.dracula.trail.length;i++)this.dracula.trail[i].location&&this.dracula.trail[i].location==this.dracula.nextMove.location&&(n=i);for(i=0;i<this.catacombs.length;i++)this.catacombs[i].location==this.dracula.nextMove.location&&(t=i);if(n&&(this.log("Dracula Doubled Back to the location in position "+(n+1)+" of the trail"),e=this.dracula.trail.splice(n,1)[0]),t){this.log("Dracula Doubled Back to the location in position "+(t+1)+" of the trail");var u=this.catacombs.splice(t,1)[0];this.dracula.pushToTrail(u),this.dracula.decideWhichEncounterToKeep(this.dracula.trail[0].encounter,this.catacombEncounters[t])==this.dracula.trail[0].encounter?(this.encounterPool.push(this.catacombEncounters.splice(t,1)[0]),this.log(this.shuffleEncounters())):(this.dracula.trail[0].encounter&&(this.encounterPool.push(this.dracula.trail[0].encounter),delete this.dracula.trail[0].encounter),this.dracula.trail[0].encounter=this.catacombEncounters.splice(t,1)[0])}break;case o.PowerName.feed:this.log("Dracula played power Feed");break;case o.PowerName.hide:this.log("Dracula moved to a hidden location"),this.dracula.hideLocation=this.dracula.currentLocation,this.dracula.revealed=!1;break;case o.PowerName.wolfForm:case o.PowerName.wolfFormAndHide:this.log("Dracula played power Wolf Form")}0!==this.dracula.nextMove.power.cost&&this.log(this.dracula.setBlood(this.dracula.blood-this.dracula.nextMove.power.cost))}if(this.dracula.nextMove.location&&((a=this.dracula.nextMove.location).type==r.LocationType.castle||a.type!==r.LocationType.sea&&(a==this.godalming.currentLocation||a==this.seward.currentLocation||a==this.vanHelsing.currentLocation||a==this.mina.currentLocation)?this.dracula.revealed=!0:this.dracula.revealed=!1,this.log(this.dracula.setLocation(a)),a.type!=r.LocationType.sea||this.dracula.seaBloodPaid?this.dracula.seaBloodPaid=!1:(this.log(this.dracula.setBlood(this.dracula.blood-1)),this.dracula.seaBloodPaid=!0)),e?(e.power=this.dracula.nextMove.power,this.log(this.dracula.pushToTrail(e)),this.dracula.revealed=e.revealed):this.log(this.dracula.pushToTrail({revealed:this.dracula.revealed,location:a,power:this.dracula.nextMove.power})),7==this.dracula.trail.length){this.log("A card has dropped off the end of the trail");var c=this.dracula.trail.pop();if(c.location&&c.location==this.dracula.hideLocation){this.log("Dracula hid at this location");for(var l=0;l<this.dracula.trail.length&&(!this.dracula.trail[l].power||this.dracula.trail[l].power.name!=o.PowerName.hide);l++);this.log("The Hide power card was removed from position "+(l+1)+" in the trail"),this.dracula.trail[l].encounter&&(this.log("The encounter on the Hide card was discarded"),this.encounterPool.push(this.dracula.trail[l].encounter),this.log(this.shuffleEncounters())),this.dracula.hideLocation=null,this.dracula.trail.splice(l,1)}c.power&&c.power.name==o.PowerName.hide&&(this.dracula.hideLocation=null),this.log(this.dracula.decideFateOfDroppedOffCard(c,this))}},n.prototype.performDraculaActionPhase=function(){this.dracula.currentLocation.type===r.LocationType.sea||this.dracula.currentLocation!=this.godalming.currentLocation&&this.dracula.currentLocation!=this.seward.currentLocation&&this.dracula.currentLocation!=this.vanHelsing.currentLocation&&this.dracula.currentLocation!=this.mina.currentLocation?this.dracula.currentLocation.type===r.LocationType.castle||this.dracula.currentLocation.type===r.LocationType.sea||this.dracula.nextMove.power&&"Hide"!=this.dracula.nextMove.power.name&&"Wolf Form"!=this.dracula.nextMove.power.name&&"Wolf Form and Hide"!=this.dracula.nextMove.power.name||(this.dracula.trail[0].encounter=this.dracula.chooseEncounter(),this.log("Dracula placed an encounter")):this.log("Dracula attacks!"),this.dracula.droppedOffEncounter&&(this.log("Dracula returned the dropped off encounter to the encounter pool"),this.encounterPool.push(this.dracula.droppedOffEncounter),this.log(this.shuffleEncounters()),this.dracula.droppedOffEncounter=null),this.log(this.dracula.drawUpEncounters(this.encounterPool))},n.prototype.shuffleEncounters=function(){for(var n=[];this.encounterPool.length>0;){var t=Math.floor(Math.random()*this.encounterPool.length);this.encounterPool[t].revealed=!1,n.push(this.encounterPool.splice(t,1)[0])}return this.encounterPool=n,"Shuffled "+this.encounterPool.length+" encounters in encounter pool"},n}();t.Game=u},function(n,t){var e;e=function(){return this}();try{e=e||new Function("return this")()}catch(n){"object"==typeof window&&(e=window)}n.exports=e},function(n,t){n.exports=function(n){return n.webpackPolyfill||(n.deprecate=function(){},n.paths=[],n.children||(n.children=[]),Object.defineProperty(n,"loaded",{enumerable:!0,get:function(){return n.l}}),Object.defineProperty(n,"id",{enumerable:!0,get:function(){return n.i}}),n.webpackPolyfill=1),n}},function(n,t,e){"use strict";var r,o=this&&this.__extends||(r=function(n,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,t){n.__proto__=t}||function(n,t){for(var e in t)t.hasOwnProperty(e)&&(n[e]=t[e])})(n,t)},function(n,t){function e(){this.constructor=n}r(n,t),n.prototype=null===t?Object.create(t):(e.prototype=t.prototype,new e)});Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function n(n){this.name=n}return n.prototype.setHealth=function(n){return this.health=Math.min(this.maxHealth,Math.max(0,n)),this.name+" is now on "+this.health+" health"},n.prototype.setLocation=function(n){return this.currentLocation=n,this.name+" moved to "+this.currentLocation.name},n}();t.Hunter=a;var i=function(n){function t(){var t=n.call(this,"Lord Godalming")||this;return t.health=t.maxHealth=12,t}return o(t,n),t}(a);t.Godalming=i;var u=function(n){function t(){var t=n.call(this,"Dr. Seward")||this;return t.health=t.maxHealth=10,t}return o(t,n),t}(a);t.Seward=u;var c=function(n){function t(){var t=n.call(this,"Van Helsing")||this;return t.health=t.maxHealth=8,t}return o(t,n),t}(a);t.VanHelsing=c;var l=function(n){function t(){var t=n.call(this,"Mina Harker")||this;return t.health=t.maxHealth=8,t}return o(t,n),t}(a);t.Mina=l},function(n,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){return function(n){this.name=n,this.revealed=!1}}();t.Encounter=r,t.initialiseEncounterPool=function(){return[new r("Ambush"),new r("Ambush"),new r("Ambush"),new r("Assassin"),new r("Bats"),new r("Bats"),new r("Bats"),new r("Desecrated Soil"),new r("Desecrated Soil"),new r("Desecrated Soil"),new r("Fog"),new r("Fog"),new r("Fog"),new r("Fog"),new r("Minion with Knife"),new r("Minion with Knife"),new r("Minion with Knife"),new r("Minion with Knife and Pistol"),new r("Minion with Knife and Pistol"),new r("Minion with Knife and Rifle"),new r("Minion with Knife and Rifle"),new r("Hoax"),new r("Hoax"),new r("Lightning"),new r("Lightning"),new r("Peasants"),new r("Peasants"),new r("Plague"),new r("Rats"),new r("Rats"),new r("Saboteur"),new r("Saboteur"),new r("Spy"),new r("Spy"),new r("Thief"),new r("Thief"),new r("New Vampire"),new r("New Vampire"),new r("New Vampire"),new r("New Vampire"),new r("New Vampire"),new r("New Vampire"),new r("Wolves"),new r("Wolves"),new r("Wolves")]},t.shuffleEncounters=function(n){for(var t=[];n.length>0;){var e=Math.floor(Math.random()*n.length);t.push(n.splice(e,1)[0])}return t}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,